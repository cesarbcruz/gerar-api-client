{
  "openapi": "3.0.1",
  "info": {
    "title": "ABB.SmartSensor.WebAPI ",
    "version": "v8.1"
  },
  "paths": {
    "/ActivationCode/{id}": {
      "get": {
        "tags": [
          "ActivationCode"
        ],
        "summary": "Get activation code details based on it's id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Activation code id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Activation code id",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationCodeResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ActivationCode": {
      "get": {
        "tags": [
          "ActivationCode"
        ],
        "summary": "Get activation codes based on filters added",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "Activation code state",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActivationCodeState"
            }
          },
          {
            "name": "activationCode",
            "in": "query",
            "description": "Part/Entire activation code",
            "schema": {
              "type": "string",
              "description": "Part/Entire activation code",
              "nullable": true
            }
          },
          {
            "name": "createdOnFrom",
            "in": "query",
            "description": "Activation code created on date start interval",
            "schema": {
              "type": "string",
              "description": "Activation code created on date start interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "createdOnTo",
            "in": "query",
            "description": "Activation code created on date end interval",
            "schema": {
              "type": "string",
              "description": "Activation code created on date end interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expirationDateFrom",
            "in": "query",
            "description": "Activation code expiration date start interval",
            "schema": {
              "type": "string",
              "description": "Activation code expiration date start interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expirationDateTo",
            "in": "query",
            "description": "Activation code expiration date end interval",
            "schema": {
              "type": "string",
              "description": "Activation code expiration date end interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "subscriptionLevelID",
            "in": "query",
            "description": "Subscriprtion Level ID",
            "schema": {
              "type": "integer",
              "description": "Subscriprtion Level ID",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "subscriptionDuration",
            "in": "query",
            "description": "Subscription duration",
            "schema": {
              "type": "integer",
              "description": "Subscription duration",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Start index",
            "schema": {
              "type": "integer",
              "description": "Start index",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "numberOfEntries",
            "in": "query",
            "description": "Number of entries per page",
            "schema": {
              "type": "integer",
              "description": "Number of entries per page",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Sort column name",
            "schema": {
              "type": "string",
              "description": "Sort column name",
              "nullable": true
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (asc/desc)",
            "schema": {
              "type": "string",
              "description": "Sort order (asc/desc)",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationCodeListResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ActivationCode"
        ],
        "summary": "Create activation codes",
        "requestBody": {
          "description": "Activation code subscription details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCodeAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCodeAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCodeAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationCodeAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ActivationCode"
        ],
        "summary": "Disable Activation Code",
        "parameters": [
          {
            "name": "activationCode",
            "in": "query",
            "description": "Subscription code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription code"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ActivationCode/History/{id}": {
      "get": {
        "tags": [
          "ActivationCode"
        ],
        "summary": "Get subscription code history based on it's id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription code id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription code id",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivationCodeStateDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ActivationCode/Download": {
      "get": {
        "tags": [
          "ActivationCode"
        ],
        "summary": "Get pdf for activation codes based on filters added",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "Activation code state",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ActivationCodeState"
            }
          },
          {
            "name": "activationCode",
            "in": "query",
            "description": "Part/Entire activation code",
            "schema": {
              "type": "string",
              "description": "Part/Entire activation code",
              "nullable": true
            }
          },
          {
            "name": "createdOnFrom",
            "in": "query",
            "description": "Activation code created on date start interval",
            "schema": {
              "type": "string",
              "description": "Activation code created on date start interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "createdOnTo",
            "in": "query",
            "description": "Activation code created on date end interval",
            "schema": {
              "type": "string",
              "description": "Activation code created on date end interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expirationDateFrom",
            "in": "query",
            "description": "Activation code expiration date start interval",
            "schema": {
              "type": "string",
              "description": "Activation code expiration date start interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expirationDateTo",
            "in": "query",
            "description": "Activation code expiration date end interval",
            "schema": {
              "type": "string",
              "description": "Activation code expiration date end interval",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "subscriptionLevelID",
            "in": "query",
            "description": "Subscriprtion Level ID",
            "schema": {
              "type": "integer",
              "description": "Subscriprtion Level ID",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "subscriptionDuration",
            "in": "query",
            "description": "Subscription duration",
            "schema": {
              "type": "integer",
              "description": "Subscription duration",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Start index",
            "schema": {
              "type": "integer",
              "description": "Start index",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "numberOfEntries",
            "in": "query",
            "description": "Number of entries per page",
            "schema": {
              "type": "integer",
              "description": "Number of entries per page",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Sort column name",
            "schema": {
              "type": "string",
              "description": "Sort column name",
              "nullable": true
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (asc/desc)",
            "schema": {
              "type": "string",
              "description": "Sort order (asc/desc)",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationCodeListResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AnomalyDetection/Key": {
      "get": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Get available anomaly detection keys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AnomalyDetection": {
      "post": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Get all anomaly detection last values for an asset list",
        "requestBody": {
          "description": "A list containing one or more Asset IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnomalyDetectionResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Add anomaly detection",
        "requestBody": {
          "description": "Add anomaly detection request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnomalyDetectionAddRequestDTO"
                },
                "description": "Add anomaly detection request"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnomalyDetectionAddRequestDTO"
                },
                "description": "Add anomaly detection request"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnomalyDetectionAddRequestDTO"
                },
                "description": "Add anomaly detection request"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnomalyDetectionAddRequestDTO"
                },
                "description": "Add anomaly detection request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnomalyDetectionAddRequestDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AnomalyDetection/{id}": {
      "post": {
        "tags": [
          "AnomalyDetection"
        ],
        "summary": "Get anomaly detection last values for an asset list by key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Anomaly Detection Key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Anomaly Detection Key",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "A list containing one or more Asset IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnomalyDetectionResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AppLog": {
      "post": {
        "tags": [
          "AppLog"
        ],
        "summary": "Upload an application log",
        "requestBody": {
          "description": "Application log details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AppLogRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppLogRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppLogRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppLogRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "AppLog"
        ],
        "summary": "Get a list of application logs",
        "parameters": [
          {
            "name": "logType",
            "in": "query",
            "description": "Type of the log, for all use 0 (Undefined)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LogType"
            }
          },
          {
            "name": "logLevel",
            "in": "query",
            "description": "Log level, for all use 0 (Undefined)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/LogLevel"
            }
          },
          {
            "name": "lastLogID",
            "in": "query",
            "description": "Last log id received, null otherwise",
            "schema": {
              "type": "integer",
              "description": "Last log id received, null otherwise",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count of items, default 1000",
            "schema": {
              "type": "integer",
              "description": "Count of items, default 1000",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "deviceUID",
            "in": "query",
            "description": "Device Unique ID",
            "schema": {
              "type": "string",
              "description": "Device Unique ID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppLogResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AppLog/{id}": {
      "get": {
        "tags": [
          "AppLog"
        ],
        "summary": "Get details of an application log",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the log",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the log",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppLogResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AppLog/Content/{id}": {
      "get": {
        "tags": [
          "AppLog"
        ],
        "summary": "Get file content of an application log",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the log",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the log",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppLogFileContentDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add an asset",
        "requestBody": {
          "description": "Asset details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get assets",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/New": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Add an unmonitored asset",
        "requestBody": {
          "description": "Asset details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUnmonitoredAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUnmonitoredAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUnmonitoredAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUnmonitoredAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Edit an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Asset details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEditRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEditRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEditRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetEditRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Asset"
        ],
        "summary": "Delete an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Reset sensor",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDeleteRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDeleteRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDeleteRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDeleteRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset extended data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Firmware/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Edit the firmware version of an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "firmwareVersion",
            "in": "query",
            "description": "Firmware version of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Firmware version of the asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareUpdateResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/LastSync": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get last synced asset",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Capability": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get assets with their capabilities",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetCapabilityResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset capabilities for a list of assets",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetCapabilityResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Capability/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset capabilities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetCapabilityResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Name": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset names with serial number for an organization",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetSimpleResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Data/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetWithHealthResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Sensor": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get asset by sensor identifier",
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "description": "Sensor identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor identifier"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSensorResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Sensor/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Commission an unmonitored asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Asset request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Sensor/List": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Get assets by sensor identifiers",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "List of sensor identifiers",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of sensor identifiers"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of sensor identifiers"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of sensor identifiers"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of sensor identifiers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetSensorResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/List": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get a list of assets without health information",
        "parameters": [
          {
            "name": "plantID",
            "in": "query",
            "description": "Id of the plant, if null returns the list unfiltered",
            "schema": {
              "type": "integer",
              "description": "Id of the plant, if null returns the list unfiltered",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "assetGroupID",
            "in": "query",
            "description": "Id of the asset group, if null returns the list unfiltered",
            "schema": {
              "type": "integer",
              "description": "Id of the asset group, if null returns the list unfiltered",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "assetsWithoutGroup",
            "in": "query",
            "description": "Filter the list for assets without groups",
            "schema": {
              "type": "boolean",
              "description": "Filter the list for assets without groups",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Health": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get a list of assets with health information",
        "parameters": [
          {
            "name": "plantID",
            "in": "query",
            "description": "Id of the plant, if null returns the list unfiltered",
            "schema": {
              "type": "integer",
              "description": "Id of the plant, if null returns the list unfiltered",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "assetGroupID",
            "in": "query",
            "description": "Id of the asset group, if null returns the list unfiltered",
            "schema": {
              "type": "integer",
              "description": "Id of the asset group, if null returns the list unfiltered",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "assetsWithoutGroup",
            "in": "query",
            "description": "Filter the list for assets without groups",
            "schema": {
              "type": "boolean",
              "description": "Filter the list for assets without groups",
              "default": false
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_ListAssetsWithHealth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetWithHealthResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Group/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Assign an asset to an asset group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "requestBody": {
          "description": "The asset group to assign the asset to",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetToGroupRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetToGroupRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetToGroupRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetToGroupRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Measurement/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Returns measurements for an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetMeasurementGroupResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Device": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Returns last device for a list of assets",
        "parameters": [
          {
            "name": "assetIDList",
            "in": "query",
            "description": "A string containing one or more asset id separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more asset id separated by commas"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetDeviceResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Returns last device for a list of assets",
        "requestBody": {
          "description": "List of asset id's",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset id's"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset id's"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset id's"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset id's"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetDeviceResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Device/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Returns last device for an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDeviceResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Property/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get a list of properties for an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetPropertyValueResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Filter": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Get a list of assets by filters",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Organization ID",
            "schema": {
              "type": "integer",
              "description": "Organization ID",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Filters",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetFilterDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetFilterDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetFilterDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetFilterDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetWithHealthResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/ProductInfo": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Query product information",
        "parameters": [
          {
            "name": "serialNumber",
            "in": "query",
            "description": "Serial Number of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Serial Number of the asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeyValueResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/SparePart": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Request spare part information",
        "parameters": [
          {
            "name": "serialNumber",
            "in": "query",
            "description": "Serial Number of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Serial Number of the asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SparePartItemDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/ReplaceSensor/{id}": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Replace sensor of an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorReplaceRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorReplaceRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorReplaceRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorReplaceRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Responsible/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Assign asset responsibility",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Favorite/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Set an asset as favorite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Asset"
        ],
        "summary": "Remove a asset from favorites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Label/{id}": {
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Add a label to an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "requestBody": {
          "description": "Value of the label",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetLabelResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Asset"
        ],
        "summary": "Remove a label from an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "requestBody": {
          "description": "Id of the label",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelRemoveRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelRemoveRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelRemoveRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLabelRemoveRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get a list of labels for an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetLabelResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Label/List": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get a list of labels with assets associated",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetLabelListResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/Picture/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Get a list of pictures for an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "assetPictureType",
            "in": "query",
            "description": "Picture type",
            "schema": {
              "$ref": "#/components/schemas/AssetPictureType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetPictureResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Asset"
        ],
        "summary": "Saves the content of an asset picture",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Picture details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPictureRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPictureRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPictureRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPictureRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPictureResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Asset"
        ],
        "summary": "Remove a picture from an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the picture",
            "schema": {
              "$ref": "#/components/schemas/AssetPictureType"
            }
          },
          {
            "name": "uniqueID",
            "in": "query",
            "description": "Unique ID of the picture",
            "schema": {
              "type": "string",
              "description": "Unique ID of the picture",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/BearingData/{id}": {
      "get": {
        "tags": [
          "Asset"
        ],
        "summary": "Obtain the Bearing data for a Bearing",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Bearing part number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Bearing part number",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BearingDataResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Asset/BearingData": {
      "post": {
        "tags": [
          "Asset"
        ],
        "summary": "Upload Bearing Data",
        "description": "Note: This call requires authentication with scope Bearing_Specification",
        "requestBody": {
          "description": "Request object containing a list of bearing data objects",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BearingDataRequestDTO"
                },
                "description": "Request object containing a list of bearing data objects"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BearingDataRequestDTO"
                },
                "description": "Request object containing a list of bearing data objects"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BearingDataRequestDTO"
                },
                "description": "Request object containing a list of bearing data objects"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BearingDataRequestDTO"
                },
                "description": "Request object containing a list of bearing data objects"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetGroup": {
      "post": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Add an asset group",
        "requestBody": {
          "description": "Asset group details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGroupResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Get the list of asset groups",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetGroupWithCountResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetGroup/{id}": {
      "put": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Edit an asset group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset group",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Asset group details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetGroupRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetGroupResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Delete an asset group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset group",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetGroup/Count": {
      "get": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Get the list of asset groups",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetGroupWithCountResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetGroup/UserGroup/{id}": {
      "put": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Add a user group to an asset group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset group",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User group details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Remove a user group from a asset group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset group",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User group details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupRemoveRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupRemoveRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupRemoveRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupToAssetGroupRemoveRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetGroup/UserGroup": {
      "get": {
        "tags": [
          "AssetGroup"
        ],
        "summary": "Get a list of asset groups that belong to a user group",
        "parameters": [
          {
            "name": "userGroupID",
            "in": "query",
            "description": "Id of the user group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user group",
              "format": "int32"
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Organization Id to filter asset groups",
            "schema": {
              "type": "integer",
              "description": "Organization Id to filter asset groups",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetGroupWithCountResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetType": {
      "get": {
        "tags": [
          "AssetType"
        ],
        "summary": "Get a list of asset types",
        "parameters": [
          {
            "name": "applicationType",
            "in": "query",
            "description": "Aplication requesting the Asset Types",
            "schema": {
              "type": "string",
              "description": "Aplication requesting the Asset Types",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypeExtendedDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetType/Property/{id}": {
      "get": {
        "tags": [
          "AssetType"
        ],
        "summary": "Get a list of properties for an asset type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetPropertyResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AssetType"
        ],
        "summary": "Assign a property to an asset type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Property details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPropertyRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPropertyRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPropertyRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetPropertyRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetType/PackageDrop": {
      "get": {
        "tags": [
          "AssetType"
        ],
        "summary": "Get package drop for asset types",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PackageDropDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetType/Property/AvailableValues/{id}": {
      "get": {
        "tags": [
          "AssetType"
        ],
        "summary": "Get asset properties with their available values for asset types",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32"
            }
          },
          {
            "name": "assetPropertyType",
            "in": "query",
            "description": "Property type",
            "schema": {
              "type": "string",
              "description": "Property type",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypePropertyAvailableValuesDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AssetType/Property/SuggestedValues/{id}": {
      "get": {
        "tags": [
          "AssetType"
        ],
        "summary": "Get asset properties with their suggested values for asset types",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32"
            }
          },
          {
            "name": "assetPropertyType",
            "in": "query",
            "description": "Property type",
            "schema": {
              "type": "string",
              "description": "Property type",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypePropertySuggestedValuesDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/AuditLog": {
      "get": {
        "tags": [
          "AuditLog"
        ],
        "summary": "Get a list of audit logs",
        "parameters": [
          {
            "name": "module",
            "in": "query",
            "description": "Type of the module",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AuditLogModule"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "Operation",
            "schema": {
              "type": "string",
              "description": "Operation",
              "nullable": true
            }
          },
          {
            "name": "details",
            "in": "query",
            "description": "Details",
            "schema": {
              "type": "string",
              "description": "Details",
              "nullable": true
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count of items, default 1000",
            "schema": {
              "type": "integer",
              "description": "Count of items, default 1000",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Auth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns an authentication token along with timestamp, expiration and user id",
        "description": "This API call is obsolete, please use POST /Auth/BearerOAuth2 with grant_type \"password\"",
        "requestBody": {
          "description": "Login credentials",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceLoginRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceLoginRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceLoginRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceLoginRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Extend the authentication information based on a refresh token",
        "description": "This API call is obsolete, please use POST /Auth/BearerOAuth2 with grant_type \"refresh_token\"",
        "requestBody": {
          "description": "Refresh token",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Auth/OIDClaim": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns authentication information for a certain user based on OID claims",
        "description": "Note: This call requires an OpenID authentication token\r\n\r\nThis API call is obsolete, please use POST /Auth/BearerOAuth2 with grant_type \"id_token\"",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns authentication information for a certain user based on OID claims and device UID",
        "description": "Note: This call requires an OpenID authentication token\r\n\r\nThis API call is obsolete, please use POST /Auth/BearerOAuth2 with grant_type \"id_token\"",
        "requestBody": {
          "description": "Login credentials",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Auth/OIDToken": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns authentication information for a certain user based on OID claims and device UID",
        "description": "Note: This call requires an OpenID authentication token\r\n\r\nThis API call is obsolete, please use POST /Auth/BearerOAuth2 with grant_type \"access_token\"",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OIDLoginRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Auth/Token": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns authentication information",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Auth/Device": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a device in the system",
        "description": "Note: This call requires authentication with scope Device_Registration\r\n\r\nThis API call is obsolete, please use POST /Device",
        "requestBody": {
          "description": "Device details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Auth/UTCTime": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns the current UTC Time",
        "description": "Note: This call requires authentication with scope Device_Registration",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UTCTimeStampResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Auth/Key": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Get authentication token by API Key",
        "description": "This API call is obsolete, please use POST /Auth/BearerOAuth2 with grant_type \"api_key\"",
        "requestBody": {
          "description": "API key",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyLoginRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyLoginRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyLoginRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyLoginRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Auth/BearerOAuth2": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticate using OAuth2 bearer",
        "requestBody": {
          "description": "Login credentials",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2LoginRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2LoginRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2LoginRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2LoginRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Auth/BasicOAuth2": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticate using OAuth2 basic",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "grant_type"
                ],
                "type": "object",
                "properties": {
                  "grant_type": {
                    "$ref": "#/components/schemas/GrantType"
                  },
                  "username": {
                    "type": "string",
                    "description": "User name",
                    "nullable": true
                  },
                  "password": {
                    "type": "string",
                    "description": "Password",
                    "nullable": true
                  },
                  "client_id": {
                    "type": "string",
                    "description": "Client id",
                    "nullable": true
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "Client secret",
                    "nullable": true
                  },
                  "scope": {
                    "type": "string",
                    "description": "Scope",
                    "nullable": true
                  },
                  "code": {
                    "type": "string",
                    "description": "Code",
                    "nullable": true
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "Refresh token",
                    "nullable": true
                  },
                  "id_token": {
                    "type": "string",
                    "description": "ID token",
                    "nullable": true
                  },
                  "access_token": {
                    "type": "string",
                    "description": "Access token",
                    "nullable": true
                  },
                  "api_key": {
                    "type": "string",
                    "description": "API key",
                    "nullable": true
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Redirect URL, in case of OAuth2 authorization code flow",
                    "nullable": true
                  },
                  "device_uid": {
                    "type": "string",
                    "description": "Custom field for SmartSensor device unique id",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "grant_type": {
                  "style": "form"
                },
                "username": {
                  "style": "form"
                },
                "password": {
                  "style": "form"
                },
                "client_id": {
                  "style": "form"
                },
                "client_secret": {
                  "style": "form"
                },
                "scope": {
                  "style": "form"
                },
                "code": {
                  "style": "form"
                },
                "refresh_token": {
                  "style": "form"
                },
                "id_token": {
                  "style": "form"
                },
                "access_token": {
                  "style": "form"
                },
                "api_key": {
                  "style": "form"
                },
                "redirect_uri": {
                  "style": "form"
                },
                "device_uid": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2LoginResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Chart/Result/{id}": {
      "post": {
        "tags": [
          "Chart"
        ],
        "summary": "Get a list of values under a table format from a generic request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chart ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Chart ID",
              "format": "int32"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Group of the chart",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChartGroup"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Maximum number of results to return",
            "schema": {
              "type": "integer",
              "description": "Maximum number of results to return",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "A list of dynamic parameters that define the request for the chart data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChartResultParameterDTO"
                },
                "description": "A list of dynamic parameters that define the request for the chart data"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChartResultParameterDTO"
                },
                "description": "A list of dynamic parameters that define the request for the chart data"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChartResultParameterDTO"
                },
                "description": "A list of dynamic parameters that define the request for the chart data"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChartResultParameterDTO"
                },
                "description": "A list of dynamic parameters that define the request for the chart data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartResultListResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Chart": {
      "get": {
        "tags": [
          "Chart"
        ],
        "summary": "Get a list of charts",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "description": "Group of the chart",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChartGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChartResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Chart/{id}": {
      "post": {
        "tags": [
          "Chart"
        ],
        "summary": "Get details of a chart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the chart",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the chart",
              "format": "int32"
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Group of the chart",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChartGroup"
            }
          },
          {
            "name": "periodType",
            "in": "query",
            "description": "Type of the period",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PeriodType"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Id of the sensor type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the sensor type",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "List of asset ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset ids"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset ids"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset ids"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDataResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ConditionIndex/Key": {
      "get": {
        "tags": [
          "ConditionIndex"
        ],
        "summary": "Get available condition indexes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ConditionIndex": {
      "get": {
        "tags": [
          "ConditionIndex"
        ],
        "summary": "Get all condition index last values for an asset list",
        "parameters": [
          {
            "name": "assetIDList",
            "in": "query",
            "description": "A string containing one or more asset id separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more asset id separated by commas"
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetConditionIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionIndexResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ConditionIndex"
        ],
        "summary": "Get all condition index last values for an asset list",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetConditionIndex"
            }
          }
        ],
        "requestBody": {
          "description": "A list containing one or more Asset IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionIndexResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ConditionIndex/{id}": {
      "get": {
        "tags": [
          "ConditionIndex"
        ],
        "summary": "Get condition index last values for an asset list by key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Condition Index Key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Condition Index Key",
              "nullable": true
            }
          },
          {
            "name": "assetIDList",
            "in": "query",
            "description": "A string containing one or more asset id separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more asset id separated by commas"
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetConditionIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionIndexResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ConditionIndex"
        ],
        "summary": "Get condition index last values for an asset list by key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Condition Index Key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Condition Index Key",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetConditionIndex"
            }
          }
        ],
        "requestBody": {
          "description": "A list containing one or more Asset IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionIndexResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ConditionIndex/Value/{id}": {
      "get": {
        "tags": [
          "ConditionIndex"
        ],
        "summary": "Get condition index values for an asset by key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Condition Index Key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Condition Index Key",
              "nullable": true
            }
          },
          {
            "name": "assetID",
            "in": "query",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the asset",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetConditionIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionIndexValueResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/ConditionIndex/Value": {
      "get": {
        "tags": [
          "ConditionIndex"
        ],
        "summary": "Get all condition index values for an asset",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the asset",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetConditionIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionIndexValueResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a device by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Device ID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeviceResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Configuration/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a device configuration by id",
        "description": "Note: This call requires authentication with scope Device_Registration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Device ID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceConfigurationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Setup/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a device configuration by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Device ID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceConfigurationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Set a device configuration by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Device ID",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Device configuration",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigurationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigurationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigurationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigurationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Property/{id}": {
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Set device requested properties by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Device ID",
              "nullable": true
            }
          },
          {
            "name": "deviceTypeID",
            "in": "query",
            "description": "Device type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device type ID",
              "format": "int32"
            }
          },
          {
            "name": "deviceCategoryID",
            "in": "query",
            "description": "Category ID of the device",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Category ID of the device",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Device properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DevicePropertyDTO"
                },
                "description": "Device properties"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DevicePropertyDTO"
                },
                "description": "Device properties"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DevicePropertyDTO"
                },
                "description": "Device properties"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DevicePropertyDTO"
                },
                "description": "Device properties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Category": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a list of device categories",
        "parameters": [
          {
            "name": "deviceType",
            "in": "query",
            "description": "Device type ID",
            "schema": {
              "$ref": "#/components/schemas/DeviceType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceCategoryDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Type": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a list of device types",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceTypeDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Property": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a list of property keys available for a device",
        "parameters": [
          {
            "name": "deviceType",
            "in": "query",
            "description": "Device type ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeviceType"
            }
          },
          {
            "name": "deviceCategoryID",
            "in": "query",
            "description": "Category ID of the device",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Category ID of the device",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePropertyExtendedDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a list of devices",
        "parameters": [
          {
            "name": "deviceType",
            "in": "query",
            "description": "Device type ID",
            "schema": {
              "$ref": "#/components/schemas/DeviceType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeviceResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Register a device in the system",
        "description": "Note: This call requires authentication with scope Device_Registration",
        "requestBody": {
          "description": "Device details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceRegisterRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/ApplicationVersion": {
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Add latest application version based on platform",
        "description": "Note: This call requires a special authentication token",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "OS type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OSType"
            }
          },
          {
            "name": "applicationVersion",
            "in": "query",
            "description": "Application version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Application version"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get the current application version based on platform",
        "description": "Note: This call requires authentication with scope Device_Registration",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "OS type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OSType"
            }
          },
          {
            "name": "applicationVersion",
            "in": "query",
            "description": "Application version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Application version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUpdateResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Software": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a device software",
        "parameters": [
          {
            "name": "deviceSoftwareID",
            "in": "query",
            "description": "Device software ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device software ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSoftwareResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Device"
        ],
        "summary": "Add a device software",
        "requestBody": {
          "description": "Device software details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceSoftwareAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceSoftwareAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceSoftwareAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceSoftwareAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSoftwareResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Software/Update/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a device software update",
        "description": "Note: This call requires authentication with scope Device_SOTA",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device UID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Device UID",
              "nullable": true
            }
          },
          {
            "name": "deviceCategoryID",
            "in": "query",
            "description": "Device category ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device category ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSoftwareResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Software/List": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Get a list of device softwares",
        "parameters": [
          {
            "name": "deviceCategoryID",
            "in": "query",
            "description": "Device category ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device category ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceSoftwareResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/SOTA/{id}": {
      "get": {
        "tags": [
          "Device"
        ],
        "summary": "Returns the content of a device software in base64 format",
        "description": "Note: This call requires authentication with scope Device_SOTA",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device software ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device software ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSoftwareFileResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Software/Available/{id}": {
      "put": {
        "tags": [
          "Device"
        ],
        "summary": "Set a device software available",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device software ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device software ID",
              "format": "int32"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "schema": {
              "type": "string",
              "description": "Comment",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Software/Deploy/{id}": {
      "put": {
        "tags": [
          "Device"
        ],
        "summary": "Deploy a device software",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device software ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device software ID",
              "format": "int32"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "schema": {
              "type": "string",
              "description": "Comment",
              "nullable": true
            }
          },
          {
            "name": "stateId",
            "in": "query",
            "description": "Deployed state ID",
            "schema": {
              "type": "integer",
              "description": "Deployed state ID",
              "format": "int32",
              "default": 4
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Device/Software/PhaseOut/{id}": {
      "put": {
        "tags": [
          "Device"
        ],
        "summary": "Phase-out a device software",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device software ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Device software ID",
              "format": "int32"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "schema": {
              "type": "string",
              "description": "Comment",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog": {
      "get": {
        "tags": [
          "EventLog"
        ],
        "summary": "Get a list of events",
        "parameters": [
          {
            "name": "eventLogType",
            "in": "query",
            "description": "Type of event",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EventLogType"
            }
          },
          {
            "name": "filterClosed",
            "in": "query",
            "description": "Filter closed events:\r\n            - null will return only open events\r\n            - true will return only closed events\r\n            - false will return all events",
            "schema": {
              "type": "boolean",
              "description": "Filter closed events:\r\n            - null will return only open events\r\n            - true will return only closed events\r\n            - false will return all events",
              "nullable": true
            }
          },
          {
            "name": "closingReason",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/EventClosingReason"
            }
          },
          {
            "name": "assetID",
            "in": "query",
            "description": "Asset ID",
            "schema": {
              "type": "integer",
              "description": "Asset ID",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "numberOfEvents",
            "in": "query",
            "description": "Number of events to be returned, default 5000",
            "schema": {
              "type": "integer",
              "description": "Number of events to be returned, default 5000",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Id of the asset type",
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "groupEvents",
            "in": "query",
            "description": "Flag that indicates if the list returned should be grouped by asset and event type",
            "schema": {
              "type": "boolean",
              "description": "Flag that indicates if the list returned should be grouped by asset and event type",
              "default": false
            }
          },
          {
            "name": "subTypeID",
            "in": "query",
            "description": "Subtype of event log",
            "schema": {
              "type": "integer",
              "description": "Subtype of event log",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventLogResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EventLog"
        ],
        "summary": "Add an event log",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "requestBody": {
          "description": "Comment details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventLogResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog/List": {
      "get": {
        "tags": [
          "EventLog"
        ],
        "summary": "Get a list of events for a list of assets",
        "parameters": [
          {
            "name": "eventLogType",
            "in": "query",
            "description": "Type of event",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EventLogType"
            }
          },
          {
            "name": "assetIDList",
            "in": "query",
            "description": "A string containing one or more asset id separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more asset id separated by commas"
            }
          },
          {
            "name": "filterClosed",
            "in": "query",
            "description": "Filter closed events:\r\n            - null will return only open events\r\n            - true will return only closed events\r\n            - false will return all events",
            "schema": {
              "type": "boolean",
              "description": "Filter closed events:\r\n            - null will return only open events\r\n            - true will return only closed events\r\n            - false will return all events",
              "nullable": true
            }
          },
          {
            "name": "closingReason",
            "in": "query",
            "description": "Filter for a closing reason",
            "schema": {
              "$ref": "#/components/schemas/EventClosingReason"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "numberOfEvents",
            "in": "query",
            "description": "Number of events to be returned, default 5000",
            "schema": {
              "type": "integer",
              "description": "Number of events to be returned, default 5000",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "groupEvents",
            "in": "query",
            "description": "Flag that indicates if the list returned should be grouped by asset and event type",
            "schema": {
              "type": "boolean",
              "description": "Flag that indicates if the list returned should be grouped by asset and event type",
              "default": false
            }
          },
          {
            "name": "subTypeID",
            "in": "query",
            "description": "Subtype of event log",
            "schema": {
              "type": "integer",
              "description": "Subtype of event log",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventLogResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "EventLog"
        ],
        "summary": "Get a list of events for a list of assets",
        "parameters": [
          {
            "name": "eventLogType",
            "in": "query",
            "description": "Type of event",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EventLogType"
            }
          },
          {
            "name": "filterClosed",
            "in": "query",
            "description": "Filter closed events:\r\n            - null will return only open events\r\n            - true will return only closed events\r\n            - false will return all events",
            "schema": {
              "type": "boolean",
              "description": "Filter closed events:\r\n            - null will return only open events\r\n            - true will return only closed events\r\n            - false will return all events",
              "nullable": true
            }
          },
          {
            "name": "closingReason",
            "in": "query",
            "description": "Filter for a closing reason",
            "schema": {
              "$ref": "#/components/schemas/EventClosingReason"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "numberOfEvents",
            "in": "query",
            "description": "Number of events to be returned, default 5000",
            "schema": {
              "type": "integer",
              "description": "Number of events to be returned, default 5000",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "groupEvents",
            "in": "query",
            "description": "Flag that indicates if the list returned should be grouped by asset and event type",
            "schema": {
              "type": "boolean",
              "description": "Flag that indicates if the list returned should be grouped by asset and event type",
              "default": false
            }
          },
          {
            "name": "subTypeID",
            "in": "query",
            "description": "Subtype of event log",
            "schema": {
              "type": "integer",
              "description": "Subtype of event log",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "requestBody": {
          "description": "List of asset IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventLogResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog/{id}": {
      "get": {
        "tags": [
          "EventLog"
        ],
        "summary": "Get the details of an event",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the event",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the event",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventLogResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog/Close/{id}": {
      "put": {
        "tags": [
          "EventLog"
        ],
        "summary": "Close an event log",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the event log",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the event log",
              "format": "int64"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "requestBody": {
          "description": "Event log request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogUpdateRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogUpdateRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogUpdateRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogUpdateRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog/Close": {
      "put": {
        "tags": [
          "EventLog"
        ],
        "summary": "Close a list of event logs",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "requestBody": {
          "description": "Event log request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogListUpdateRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogListUpdateRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogListUpdateRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogListUpdateRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog/Comment": {
      "post": {
        "tags": [
          "EventLog"
        ],
        "summary": "Add an event log comment",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "requestBody": {
          "description": "Comment details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog/SupportRequest": {
      "post": {
        "tags": [
          "EventLog"
        ],
        "summary": "Add a support request for health event",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetEventLog"
            }
          }
        ],
        "requestBody": {
          "description": "Support request with comment",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCommentRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/EventLog/SubType": {
      "get": {
        "tags": [
          "EventLog"
        ],
        "summary": "Get a list of event properties",
        "parameters": [
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Asset Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Asset Type ID",
              "format": "int32"
            }
          },
          {
            "name": "eventLogType",
            "in": "query",
            "description": "Type of event",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Type of event",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventLogSubTypeResponseDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Firmware": {
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Get a list of firmwares",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FirmwareResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Firmware"
        ],
        "summary": "Add a firmware",
        "requestBody": {
          "description": "Firmware details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/{id}": {
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Get data for a specific firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Firmware"
        ],
        "summary": "Edit a firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Firmware details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareEditRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareEditRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareEditRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareEditRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Firmware"
        ],
        "summary": "Delete a firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/Details/{id}": {
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Get details for a specific firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareDetailsResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/Details": {
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Get details for firmwares",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FirmwareDetailsExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/MeasurementType/{id}": {
      "put": {
        "tags": [
          "Firmware"
        ],
        "summary": "Edit a measurement type for a firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Firmware details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareMeasurementTypeRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareMeasurementTypeRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareMeasurementTypeRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareMeasurementTypeRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/SensorFeature/{id}": {
      "put": {
        "tags": [
          "Firmware"
        ],
        "summary": "Edit a sensor feature type for a firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Firmware details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareSensorFeatureRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareSensorFeatureRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareSensorFeatureRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareSensorFeatureRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/FOTA/{id}": {
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Returns the content of a firmware in base64 format",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareFileResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/Deploy/{id}": {
      "put": {
        "tags": [
          "Firmware"
        ],
        "summary": "Deploy a firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Firmware deployment filters",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareDeploymentRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareDeploymentRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareDeploymentRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareDeploymentRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Get firmware deployment filters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FirmwareDeploymentFilterResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/Activate/{id}": {
      "put": {
        "tags": [
          "Firmware"
        ],
        "summary": "Activate a firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/PhaseOut/{id}": {
      "put": {
        "tags": [
          "Firmware"
        ],
        "summary": "Phase-out a firmware",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/Property": {
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Get a list of firmware properties available",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FirmwarePropertyResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/Property/{id}": {
      "get": {
        "tags": [
          "Firmware"
        ],
        "summary": "Get firmware properties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FirmwarePropertyResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Firmware"
        ],
        "summary": "Edit firmware properties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firmware ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Firmware ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Firmware properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FirmwarePropertyRequestDTO"
                },
                "description": "Firmware properties"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FirmwarePropertyRequestDTO"
                },
                "description": "Firmware properties"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FirmwarePropertyRequestDTO"
                },
                "description": "Firmware properties"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FirmwarePropertyRequestDTO"
                },
                "description": "Firmware properties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Firmware/Validate": {
      "post": {
        "tags": [
          "Firmware"
        ],
        "summary": "Validate a firmware",
        "requestBody": {
          "description": "Firmware details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareValidateRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareValidateRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareValidateRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FirmwareValidateRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareValidateResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Voucher": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about voucher purchase",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Contract": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about contract purchase",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Contract/Cancel": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about canceling a contract",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/ProvisionAmbient": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about ambient sensor provision",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/CloudInterfaceAddOn": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about cloud interface add-on",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Voucher/{uniqueID}": {
      "put": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Download Vouchers PDF",
        "parameters": [
          {
            "name": "uniqueID",
            "in": "path",
            "description": "Account id of the invitation",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Account id of the invitation",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileContentDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Sandbox/Add": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about adding a user to sandbox organization",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Sandbox/Delete": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about removing a user from sandbox organization",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Report": {
      "get": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Receive marketplace notification about a motor fleet report request",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Marketplace/Validate": {
      "post": {
        "tags": [
          "Marketplace"
        ],
        "summary": "Validates the user input organization",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Value": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Returns measurement values for an asset based on one or more measurement types",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "The id of the asset to get the measurements for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the asset to get the measurements for",
              "format": "int32"
            }
          },
          {
            "name": "measurementTypes",
            "in": "query",
            "description": "A string containing one or more measurement type ids separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more measurement type ids separated by commas"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetTrendData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementsResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/List/Value": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "summary": "Returns measurement values for a list of assets and measurement types",
        "description": "Note: The combined number of assets and measurement types is limited to 60.\r\nFor example: 1 assset x 60 measurement types, 2 assets x 30 measurement types, etc...",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetTrendData"
            }
          }
        ],
        "requestBody": {
          "description": "Measurement list request with multiple asset ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementListRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementListRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementListRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementListRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementsListResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Trend": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Returns all measurement values for a trend identified by a timestamp",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "The id of the asset to get the measurements for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the asset to get the measurements for",
              "format": "int32"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Time stamp of the trend data",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Time stamp of the trend data",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetTrendData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementsResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Average": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Returns the average value of this specific measurement type",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "The id of the asset to get the measurements for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the asset to get the measurements for",
              "format": "int32"
            }
          },
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Asset type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Asset type ID",
              "format": "int32"
            }
          },
          {
            "name": "measurementTypeCode",
            "in": "query",
            "description": "Measurement type code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Measurement type code"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Export/AssetGroup": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "summary": "Send an email with measurement values for all the assets in an asset group",
        "parameters": [
          {
            "name": "assetGroupID",
            "in": "query",
            "description": "The asset group ID of the assets to get the measurements for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The asset group ID of the assets to get the measurements for",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetMeasurementExport"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Export/Asset": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "summary": "Send an email with measurement values for the requested measurement types for an asset",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "The id of the asset to get the measurements for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the asset to get the measurements for",
              "format": "int32"
            }
          },
          {
            "name": "measurementTypes",
            "in": "query",
            "description": "A string containing one or more measurement type ids separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more measurement type ids separated by commas"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_AssetMeasurementExport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementsResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "summary": "Load measurements for assets",
        "requestBody": {
          "description": "Asset measurement details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Load": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "summary": "Load measurements for assets",
        "requestBody": {
          "description": "Asset measurement details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Measurement/Sensor": {
      "post": {
        "tags": [
          "Measurement"
        ],
        "summary": "Load measurements by sensor identifier",
        "requestBody": {
          "description": "Sensor Measurement details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementSensorAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementSensorAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementSensorAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MeasurementSensorAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/HealthInterval/{id}": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Returns measurement health intervals for an asset based on one or more measurement types",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "measurementTypes",
            "in": "query",
            "description": "A string containing one or more measurement type ids separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more measurement type ids separated by commas"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_ConfigureAssetHealth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementHealthIntervalResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Measurement"
        ],
        "summary": "Save health intervals for measurement types of an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_ConfigureAssetHealth"
            }
          }
        ],
        "requestBody": {
          "description": "Health interval details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementHealthIntervalRequestDTO"
                },
                "description": "Health interval details"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementHealthIntervalRequestDTO"
                },
                "description": "Health interval details"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementHealthIntervalRequestDTO"
                },
                "description": "Health interval details"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementHealthIntervalRequestDTO"
                },
                "description": "Health interval details"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Calibration/{id}": {
      "put": {
        "tags": [
          "Measurement"
        ],
        "summary": "Save calibration offset for measurement types of an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Calibration values to be saved",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementCalibrationRequestDTO"
                },
                "description": "Calibration values to be saved"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementCalibrationRequestDTO"
                },
                "description": "Calibration values to be saved"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementCalibrationRequestDTO"
                },
                "description": "Calibration values to be saved"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MeasurementCalibrationRequestDTO"
                },
                "description": "Calibration values to be saved"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Get calibration offset for measurement types of an asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "measurementTypeIDs",
            "in": "query",
            "description": "A string containing one or more measurement type ids separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more measurement type ids separated by commas"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementCalibrationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/ThresholdCalculation/{id}": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Calculate new health interval values for a specific time interval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the asset",
              "format": "int32"
            }
          },
          {
            "name": "measurementTypeID",
            "in": "query",
            "description": "ID of the measurement type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the measurement type",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_ConfigureAssetHealth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementHealthIntervalResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/HealthInterval/Default/{id}": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Get the default health interval values for a measurement type of an asset type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the asset type",
              "format": "int32"
            }
          },
          {
            "name": "measurementTypeID",
            "in": "query",
            "description": "ID of the measurement type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the measurement type",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementHealthIntervalResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/AssetType": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Get a list of measurement types for an asset type",
        "parameters": [
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Id of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementTypeDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Measurement/Unit": {
      "get": {
        "tags": [
          "Measurement"
        ],
        "summary": "Get the list of measurement units",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeasurementUnitGroupResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Notification": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get notifications",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Notification/User": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get user notifications",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "Id of asset",
            "schema": {
              "type": "integer",
              "description": "Id of asset",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserNotificationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Notification/Asset/Channel/{id}": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Add a channel to a notification for an asset id list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of notification type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of notification type",
              "format": "int32"
            }
          },
          {
            "name": "channelID",
            "in": "query",
            "description": "Id of channel",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of channel",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Object which contains asset ID list and notification properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Notification"
        ],
        "summary": "Add or update a channel to a notification for an asset id list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of notification type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of notification type",
              "format": "int32"
            }
          },
          {
            "name": "channelID",
            "in": "query",
            "description": "Id of channel",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of channel",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Object which contains asset ID list and notification properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserAssetNotificationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Notification"
        ],
        "summary": "Remove a channel from a notification for an asset id list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of notification",
              "format": "int32"
            }
          },
          {
            "name": "channelID",
            "in": "query",
            "description": "Id of notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of notification",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A string containing one or more Asset IDs separated by commas",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset IDs separated by commas"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset IDs separated by commas"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset IDs separated by commas"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset IDs separated by commas"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Notification/User/Channel/{id}": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Add a channel to a user notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the notification",
              "format": "int32"
            }
          },
          {
            "name": "channelID",
            "in": "query",
            "description": "Id of channel",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of channel",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Object which contains asset ID list and notification properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Notification"
        ],
        "summary": "Add or update a channel to a user notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the notification",
              "format": "int32"
            }
          },
          {
            "name": "channelID",
            "in": "query",
            "description": "Id of channel",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of channel",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Object which contains asset ID list and notification properties",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserNotificationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Notification"
        ],
        "summary": "Remove a channel from a user notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of notification",
              "format": "int32"
            }
          },
          {
            "name": "channelID",
            "in": "query",
            "description": "Id of notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of notification",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Notification/Broadcast": {
      "put": {
        "tags": [
          "Notification"
        ],
        "summary": "Add or update broadcast notification",
        "parameters": [
          {
            "name": "broadcastMessageID",
            "in": "query",
            "description": "Id of the broadcast notification",
            "schema": {
              "type": "integer",
              "description": "Id of the broadcast notification",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Object which contains broadcast notification request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastMessageRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastMessageRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastMessageRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastMessageRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get broadcast notifications",
        "parameters": [
          {
            "name": "broadcastMessageID",
            "in": "query",
            "description": "Id of the broadcast notification",
            "schema": {
              "type": "integer",
              "description": "Id of the broadcast notification",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BroadcastMessageResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Notification/User/Broadcast/{id}": {
      "delete": {
        "tags": [
          "Notification"
        ],
        "summary": "Delete user broadcast notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the broadcast notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the broadcast notification",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List with id of the users",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List with id of the users"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List with id of the users"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List with id of the users"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List with id of the users"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get a list of organizations for the current user",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a new organization",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/List": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Get a list of organizations for a particular user",
        "requestBody": {
          "description": "Name of the user",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/Count": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get a list of organizations with asset and user count",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationWithCountResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/Subscription/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get the starting subscription configuration of a specific organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Organization ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSubscriptionResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/Subscription": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Add an organization subscription",
        "requestBody": {
          "description": "Organization subscription",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSubscriptionRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSubscriptionRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSubscriptionRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationSubscriptionRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSubscriptionResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete an organization subscription",
        "parameters": [
          {
            "name": "configurationItem",
            "in": "query",
            "description": "Configuration item",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Configuration item"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/{id}": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Organization details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get the details of an organization by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "organization ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/PromotionalInformation/{id}": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update provided Promotional Information of an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationPromotionalInfoUpdateRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationPromotionalInfoUpdateRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationPromotionalInfoUpdateRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationPromotionalInfoUpdateRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/UserGroupsWithUsers/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get the user groups with users of an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationUserGroupWithUsersResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/AllowManagedUserRequests/{id}": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Enable organization managed user request sending",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "organization ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/Trusted/{id}": {
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Remove trusted organization from an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "organization ID",
              "format": "int32"
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "trusted organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "trusted organization ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of asset group IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Add a trusted organization to organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Organization ID",
              "format": "int32"
            }
          },
          {
            "name": "organizationID",
            "in": "query",
            "description": "Trusted organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Trusted organization ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of asset group IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "List of asset group IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get organization with trusted organizations relationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrustedOrganizationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/TrustedOrganization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get the details of a trusted organization by name",
        "parameters": [
          {
            "name": "organizationName",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/Maintenance/{id}": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Add organization maintenance schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Organization maintenance schedule",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMaintenanceRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMaintenanceRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMaintenanceRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMaintenanceRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get organization maintenance schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMaintenanceResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete organization maintenance schedule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          },
          {
            "name": "maintenanceType",
            "in": "query",
            "description": "Maintenance Type",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MaintenanceType"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/Trusted": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get a list of trusted organizations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Organization/EventDismiss/{id}": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Add organization event log dismissal period",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          },
          {
            "name": "dismissEventLogPeriod",
            "in": "query",
            "description": "Dismissal period",
            "schema": {
              "type": "integer",
              "description": "Dismissal period",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get organization event log dismissal period",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plant": {
      "post": {
        "tags": [
          "Plant"
        ],
        "summary": "Add a plant",
        "requestBody": {
          "description": "Plant details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PlantAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlantAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlantAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlantAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Plant"
        ],
        "summary": "Get a list of plants",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlantResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plant/{id}": {
      "put": {
        "tags": [
          "Plant"
        ],
        "summary": "Edit a plant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the plant",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the plant",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Plant details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PlantEditRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlantEditRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlantEditRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlantEditRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Plant"
        ],
        "summary": "Get the details of a specific plant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plant ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Plant ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Plant"
        ],
        "summary": "Delete a plant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the plant to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the plant to be deleted",
              "format": "int32"
            }
          },
          {
            "name": "newPlantID",
            "in": "query",
            "description": "Id of the plant to which the assets will be transfered",
            "schema": {
              "type": "integer",
              "description": "Id of the plant to which the assets will be transfered",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plant/Health": {
      "get": {
        "tags": [
          "Plant"
        ],
        "summary": "Get a list of plants with health status",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlantWithHealthResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plant/Count": {
      "get": {
        "tags": [
          "Plant"
        ],
        "summary": "Get a list of plants with count of assets",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlantWithCountResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plant/Countries": {
      "get": {
        "tags": [
          "Plant"
        ],
        "summary": "Get countries information",
        "parameters": [
          {
            "name": "countryCode",
            "in": "query",
            "description": "Country code",
            "schema": {
              "type": "string",
              "description": "Country code",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plot/Scatter": {
      "get": {
        "tags": [
          "Plot"
        ],
        "summary": "Get a list of scatter plots for an asset type",
        "parameters": [
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Id of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32"
            }
          },
          {
            "name": "assetID",
            "in": "query",
            "description": "Id of the asset",
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScatterPlotResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plot/Scatter/Value": {
      "get": {
        "tags": [
          "Plot"
        ],
        "summary": "Get a list of scatter plot values for an asset",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "scatterPlotID",
            "in": "query",
            "description": "Id of the scatter plot",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the scatter plot",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScatterPlotResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plot/Histogram": {
      "get": {
        "tags": [
          "Plot"
        ],
        "summary": "Get a list of histograms for an asset type",
        "parameters": [
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Id of the asset type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset type",
              "format": "int32"
            }
          },
          {
            "name": "assetID",
            "in": "query",
            "description": "Id of the asset",
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistogramResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Plot/Histogram/Value": {
      "get": {
        "tags": [
          "Plot"
        ],
        "summary": "Get a list of histogram values from an asset",
        "parameters": [
          {
            "name": "assetID",
            "in": "query",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "histogramID",
            "in": "query",
            "description": "Id of the histogram type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the histogram type",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HistogramDataResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/PowerTrain": {
      "post": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Add a powertrain",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/PowerTrain/List": {
      "put": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Get a list of PowerTrains by site identifiers",
        "requestBody": {
          "description": "Site identifiers",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PowerTrainResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Get a list of PowerTrains by site ids",
        "requestBody": {
          "description": "Site ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Site ids"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Site ids"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Site ids"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Site ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PowerTrainResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/PowerTrain/{id}": {
      "put": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Update the PowerTrain fields",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the PowerTrain to be edited",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the PowerTrain to be edited",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "PowerTrain data to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainEditRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainEditRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainEditRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PowerTrainEditRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Delete a PowerTrain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "PowerTrain ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "PowerTrain ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/PowerTrain/Component/{id}": {
      "put": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Update the list of components in the PowerTrain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "PowerTrain ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "PowerTrain ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of components to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComponentDTO"
                },
                "description": "List of components to update"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComponentDTO"
                },
                "description": "List of components to update"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComponentDTO"
                },
                "description": "List of components to update"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComponentDTO"
                },
                "description": "List of components to update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/PowerTrain/Component/Name": {
      "put": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Update the name for a list of components in the PowerTrain",
        "requestBody": {
          "description": "List of components to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                },
                "description": "List of components to update"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                },
                "description": "List of components to update"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                },
                "description": "List of components to update"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StringStringKeyValuePair"
                },
                "description": "List of components to update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/PowerTrain/KPITemplate/{id}": {
      "get": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Get a list of KPI templates applicable to a Powertrain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Powertrain",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the Powertrain",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KPITemplateResponseDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/PowerTrain/KPITemplate": {
      "post": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Add a new KPI template to a Powertrain",
        "requestBody": {
          "description": "Template object containing the KPI items",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/KPITemplateAddDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KPITemplateAddDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/KPITemplateAddDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/KPITemplateAddDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Delete a specific KPI template",
        "parameters": [
          {
            "name": "templateID",
            "in": "query",
            "description": "ID of the KPI Template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the KPI Template",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/PowerTrain/ComponentType": {
      "get": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Get a list of component types",
        "parameters": [
          {
            "name": "applicationType",
            "in": "query",
            "description": "Aplication requesting the component types",
            "schema": {
              "$ref": "#/components/schemas/ApplicationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentTypeDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Powertrain/Component/Check": {
      "post": {
        "tags": [
          "PowerTrain"
        ],
        "summary": "Check a list of assets as being Powertrain components",
        "requestBody": {
          "description": "Asset ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Asset ids"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Asset ids"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Asset ids"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Asset ids"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PowerTrainComponentCheckResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/Content/{id}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get file content of a report",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Report category",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReportCategory"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the report",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the report",
              "format": "int32"
            }
          },
          {
            "name": "entityID",
            "in": "query",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the entity",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportFileContentDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/List": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Returns reports for an entity",
        "parameters": [
          {
            "name": "reportCategory",
            "in": "query",
            "description": "Report category",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReportCategory"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_Reports"
            }
          }
        ],
        "requestBody": {
          "description": "A string containing one or more Asset or Organization IDs separated by commas",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset or Organization IDs separated by commas"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset or Organization IDs separated by commas"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset or Organization IDs separated by commas"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A string containing one or more Asset or Organization IDs separated by commas"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Add a report request",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_Reports"
            }
          }
        ],
        "requestBody": {
          "description": "Report Request Details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/Revoke/{id}": {
      "put": {
        "tags": [
          "Report"
        ],
        "summary": "Revoke a report",
        "parameters": [
          {
            "name": "reportCategory",
            "in": "query",
            "description": "Report category",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ReportCategory"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Report ID",
              "format": "int32"
            }
          },
          {
            "name": "entityID",
            "in": "query",
            "description": "Entity ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Entity ID",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_Reports"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/Reject/{id}": {
      "put": {
        "tags": [
          "Report"
        ],
        "summary": "Reject a report",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Report ID",
              "format": "int32"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Comment"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_Reports"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/Complete/{id}": {
      "put": {
        "tags": [
          "Report"
        ],
        "summary": "Complete a report",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Report ID",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_Reports"
            }
          }
        ],
        "requestBody": {
          "description": "Report details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCompleteRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCompleteRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCompleteRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCompleteRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/{id}": {
      "delete": {
        "tags": [
          "Report"
        ],
        "summary": "Delete a report",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Report ID",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_Reports"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/Type": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get a list of report types",
        "parameters": [
          {
            "name": "reportCategory",
            "in": "query",
            "description": "Report category",
            "schema": {
              "$ref": "#/components/schemas/ReportCategory"
            }
          },
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Asset type",
            "schema": {
              "type": "integer",
              "description": "Asset type",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportTypeResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Report/Completed": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Webhook for sending a completed report",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Paginated": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of sensors",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "Start index",
            "schema": {
              "type": "integer",
              "description": "Start index",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "numberOfEntries",
            "in": "query",
            "description": "Number of entries per page",
            "schema": {
              "type": "integer",
              "description": "Number of entries per page",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "sortColumn",
            "in": "query",
            "description": "Sort column name",
            "schema": {
              "type": "string",
              "description": "Sort column name",
              "nullable": true
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (asc/desc)",
            "schema": {
              "type": "string",
              "description": "Sort order (asc/desc)",
              "nullable": true
            }
          },
          {
            "name": "sensorIdentifier",
            "in": "query",
            "description": "Sensor Identifier",
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "subscriptionLevelDescription",
            "in": "query",
            "description": "Subscription Level Description",
            "schema": {
              "type": "string",
              "description": "Subscription Level Description",
              "nullable": true
            }
          },
          {
            "name": "hardwareRevisionName",
            "in": "query",
            "description": "Hardware Revision Name",
            "schema": {
              "type": "string",
              "description": "Hardware Revision Name",
              "nullable": true
            }
          },
          {
            "name": "manufacturingBatch",
            "in": "query",
            "description": "Manufacturing Batch",
            "schema": {
              "type": "string",
              "description": "Manufacturing Batch",
              "nullable": true
            }
          },
          {
            "name": "BaseFirmwareVersion",
            "in": "query",
            "description": "Base Firmware Version",
            "schema": {
              "type": "string",
              "description": "Base Firmware Version",
              "nullable": true
            }
          },
          {
            "name": "lastMeasurementCreatedOn",
            "in": "query",
            "description": "Last Measurement Created On",
            "schema": {
              "type": "string",
              "description": "Last Measurement Created On",
              "nullable": true
            }
          },
          {
            "name": "lastResetDate",
            "in": "query",
            "description": "Last Reset Date",
            "schema": {
              "type": "string",
              "description": "Last Reset Date",
              "nullable": true
            }
          },
          {
            "name": "assetName",
            "in": "query",
            "description": "Asset Name",
            "schema": {
              "type": "string",
              "description": "Asset Name",
              "nullable": true
            }
          },
          {
            "name": "plantName",
            "in": "query",
            "description": "Plant Name",
            "schema": {
              "type": "string",
              "description": "Plant Name",
              "nullable": true
            }
          },
          {
            "name": "organizationName",
            "in": "query",
            "description": "Organization Name",
            "schema": {
              "type": "string",
              "description": "Organization Name",
              "nullable": true
            }
          },
          {
            "name": "commissionedOn",
            "in": "query",
            "description": "Commissioned On",
            "schema": {
              "type": "string",
              "description": "Commissioned On",
              "nullable": true
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "Location",
            "schema": {
              "type": "string",
              "description": "Location",
              "nullable": true
            }
          },
          {
            "name": "currentFirmwareVersion",
            "in": "query",
            "description": "Current Firmware Version",
            "schema": {
              "type": "string",
              "description": "Current Firmware Version",
              "nullable": true
            }
          },
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Asset type ID",
            "schema": {
              "type": "integer",
              "description": "Asset type ID",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "isCommissioned",
            "in": "query",
            "description": "Flag for commissioned sensors",
            "schema": {
              "type": "boolean",
              "description": "Flag for commissioned sensors",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorListResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of sensors",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Upload sensor list",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          },
          {
            "name": "assetTypeID",
            "in": "query",
            "description": "Asset Type ID",
            "schema": {
              "type": "integer",
              "description": "Asset Type ID",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Sensor List",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorAddRequestDTO"
                },
                "description": "Sensor List"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorAddRequestDTO"
                },
                "description": "Sensor List"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorAddRequestDTO"
                },
                "description": "Sensor List"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorAddRequestDTO"
                },
                "description": "Sensor List"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sensor"
        ],
        "summary": "Upload a sensor",
        "description": "Note: This call requires authentication with scope Sensor_Operation",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Export": {
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Send Sensor List by Email",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor by sensorIdentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          },
          {
            "name": "assetSerialNumber",
            "in": "query",
            "description": "Asset Serial Number",
            "schema": {
              "type": "string",
              "description": "Asset Serial Number",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Details/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor details by sensorIdentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          },
          {
            "name": "assetSerialNumber",
            "in": "query",
            "description": "Asset Serial Number",
            "schema": {
              "type": "string",
              "description": "Asset Serial Number",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorDetailResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Configuration/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor configuration profiles by sensorIdentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationProfileDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Save sensor configuration profiles by sensorIdentifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "A string containing one or more configuration profile id separated by commas",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "description": "A string containing one or more configuration profile id separated by commas"
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "description": "A string containing one or more configuration profile id separated by commas"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "description": "A string containing one or more configuration profile id separated by commas"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "description": "A string containing one or more configuration profile id separated by commas"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/ResetHistory/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of resets for a sensor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorResetHistoryResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/CommissionHistory/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of commissions for a sensor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorResetHistoryResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/CommissionStatus/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get the commissionning status for a sensor",
        "description": "Note: This call requires authentication with scope Sensor_Operation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorCommissionStatusResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Subscription/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor subscription details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorActiveSubscriptionResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Feature": {
      "put": {
        "tags": [
          "Sensor"
        ],
        "summary": "Save feature values for a sensor. Features under subscription control will throw an error",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "WEB_SensorFeatureConfiguration"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Save feature values for a sensor while ignoring features under subscription control",
        "parameters": [
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "WEB_SensorFeatureConfiguration"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SensorFeatureRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Feature/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of sensor features with values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Type ID of the sensor",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Type ID of the sensor",
              "format": "int32"
            }
          },
          {
            "name": "featureTypes",
            "in": "query",
            "description": "A string containing one or more feature type ids separated by commas",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A string containing one or more feature type ids separated by commas"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorFeatureValueExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Feature/Value/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of sensor features with last values",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "ID of the Sensor Type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the Sensor Type",
              "format": "int32"
            }
          },
          {
            "name": "featureTypes",
            "in": "query",
            "description": "A string containing one or more feature type ids separated by commas, if empty returns the list unfiltered",
            "schema": {
              "type": "string",
              "description": "A string containing one or more feature type ids separated by commas, if empty returns the list unfiltered",
              "nullable": true
            }
          },
          {
            "name": "complexObject",
            "in": "query",
            "description": "Get values for complex objects",
            "schema": {
              "type": "boolean",
              "description": "Get values for complex objects",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorFeatureValueExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Feature/Value": {
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get a list of sensor features with last values",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "ID of the Sensor Type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the Sensor Type",
              "format": "int32"
            }
          },
          {
            "name": "featureTypes",
            "in": "query",
            "description": "A string containing one or more feature type ids separated by commas, if empty returns the list unfiltered",
            "schema": {
              "type": "string",
              "description": "A string containing one or more feature type ids separated by commas, if empty returns the list unfiltered",
              "nullable": true
            }
          },
          {
            "name": "complexObject",
            "in": "query",
            "description": "Get values for complex objects",
            "schema": {
              "type": "boolean",
              "description": "Get values for complex objects",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "List of Sensor Identifiers",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Sensor Identifiers"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Sensor Identifiers"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Sensor Identifiers"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of Sensor Identifiers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorFeatureValueExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Subscription": {
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Subscribe a sensor with an activation code",
        "parameters": [
          {
            "name": "activationCode",
            "in": "query",
            "description": "Activation code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Activation code"
            }
          },
          {
            "name": "sensorIdentifier",
            "in": "query",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorActiveSubscriptionResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/AuthenticationID": {
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Save authentication ID value for a sensor",
        "parameters": [
          {
            "name": "sensorIdentifier",
            "in": "query",
            "description": "Sensor identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor identifier"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Authentication ID value",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/PassKey": {
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Save pass key value for a sensor",
        "parameters": [
          {
            "name": "sensorIdentifier",
            "in": "query",
            "description": "Sensor identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor identifier"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Pass key value",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get pass key value for a sensor",
        "parameters": [
          {
            "name": "sensorIdentifier",
            "in": "query",
            "description": "Sensor identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor identifier"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Maintenance": {
      "post": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor maintenance schedule",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Interval start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Interval start date",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Interval end date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Interval end date",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "Model that defines sensors identifiers and type",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorListRequestDTO"
                },
                "description": "Model that defines sensors identifiers and type"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorListRequestDTO"
                },
                "description": "Model that defines sensors identifiers and type"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorListRequestDTO"
                },
                "description": "Model that defines sensors identifiers and type"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SensorListRequestDTO"
                },
                "description": "Model that defines sensors identifiers and type"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorsMaintenanceResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/Firmware/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get the firmware version of a sensor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareUpdateResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sensor"
        ],
        "summary": "Edit the firmware version of a sensor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          },
          {
            "name": "firmwareVersion",
            "in": "query",
            "description": "Firmware version of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Firmware version of the asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareUpdateResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/State/{id}": {
      "put": {
        "tags": [
          "Sensor"
        ],
        "summary": "Set sensor state",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Sensor State",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SensorState"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/StateHistory/{id}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get sensor state history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorStateHistoryResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Sensor/FirmwareHistory/{sensorIdentifier}": {
      "get": {
        "tags": [
          "Sensor"
        ],
        "summary": "Get the firmware update history of a sensor",
        "parameters": [
          {
            "name": "sensorIdentifier",
            "in": "path",
            "description": "Sensor Identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor Identifier",
              "nullable": true
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor type ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SensorFirmwareHistoryResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/SensorType": {
      "get": {
        "tags": [
          "SensorType"
        ],
        "summary": "Get a list of sensor types",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorTypeResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/SensorType/HardwareRevision/{id}": {
      "get": {
        "tags": [
          "SensorType"
        ],
        "summary": "Get a list of hardware revisions for a sensor type and hardware variance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sensor type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the sensor type",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HardwareRevisionResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/SensorType/Property/{id}": {
      "get": {
        "tags": [
          "SensorType"
        ],
        "summary": "Get a list of properties for a sensor type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sensor type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the sensor type",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorPropertyResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/SensorType/Feature/{id}": {
      "get": {
        "tags": [
          "SensorType"
        ],
        "summary": "Get a list of features for a sensor type and hardware variance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sensor type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the sensor type",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SensorFeatureResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/SensorType/ConfigurationProfile/{id}": {
      "get": {
        "tags": [
          "SensorType"
        ],
        "summary": "Get a list of configuration profiles corresponding to a sensor type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the sensor type",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the sensor type",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypeConfigurationProfileDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Site": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get a list of Sites based on user organizationID",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Organization ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PowerTrainSiteDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Site"
        ],
        "summary": "Add a new Site or update with ServIS identifier",
        "requestBody": {
          "description": "New Site",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableSiteDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableSiteDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableSiteDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableSiteDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Site"
        ],
        "summary": "Delete Site",
        "parameters": [
          {
            "name": "siteID",
            "in": "query",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Site ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Site/Identifier": {
      "post": {
        "tags": [
          "Site"
        ],
        "summary": "Get a list of Sites based on ServIS siteIdentifiers",
        "requestBody": {
          "description": "Site identifiers",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Site identifiers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PowerTrainSiteDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Site/{id}": {
      "delete": {
        "tags": [
          "Site"
        ],
        "summary": "Delete Site",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Site ID",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Site/Nearby": {
      "get": {
        "tags": [
          "Site"
        ],
        "summary": "Get nearby sites from ServIS",
        "parameters": [
          {
            "name": "latitude",
            "in": "query",
            "description": "Latitude",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Latitude",
              "format": "double"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "Longitude",
            "required": true,
            "schema": {
              "type": "number",
              "description": "Longitude",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/Api": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of APIs",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/ApiGroup/List": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of API groups",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGroupResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/ApiGroup": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of API groups with associated API's",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiGroupExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/Capability": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get capabilities with associated API groups",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CapabilityExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/Capability/List": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of capabilities",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CapabilityResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/SensorType": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get subscriptions with associated sensor types",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Add sensor type to subscription",
        "parameters": [
          {
            "name": "subscriptionLevelID",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Remove sensor type from subscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get subscriptions with associated capabilities",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionExtendedResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/List": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of subscriptions",
        "parameters": [
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Id of the sensor type",
            "schema": {
              "type": "integer",
              "description": "Id of the sensor type",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/{id}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get details of a subscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the subscription",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the subscription",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionExtendedResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/Duration": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get the list of all subscription durations (value in months)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Subscription/Duration/{id}": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get a list of subscription durations for a specific subscription level ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the subscription level",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the subscription level",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Add a subscription duration for a subscription level ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription level ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Subscription level ID",
              "format": "int32"
            }
          },
          {
            "name": "durationMonths",
            "in": "query",
            "description": "Duration months",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Duration months",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Delete a subscription duration for a subscription level ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Subscription level ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Subscription level ID",
              "format": "int32"
            }
          },
          {
            "name": "durationMonths",
            "in": "query",
            "description": "Duration months",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Duration months",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeBasedAnalytics/FFT/{id}": {
      "get": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Get FFT calculation by asset ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_TimeBasedAnalytics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FFTResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeBasedAnalytics/FFT/Sensor": {
      "get": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Get FFT calculation",
        "parameters": [
          {
            "name": "sensorIdentifier",
            "in": "query",
            "description": "Sensor identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sensor identifier"
            }
          },
          {
            "name": "sensorTypeID",
            "in": "query",
            "description": "Sensor Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sensor Type ID",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_TimeBasedAnalytics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FFTResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeBasedAnalytics/KPI/Key": {
      "get": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Get available keys for time-based KPI type",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of time-based KPI",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeBasedKPIType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeBasedKPIKeyDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeBasedAnalytics/KPI/{type}": {
      "post": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Add time-based KPI values",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of time-based KPI",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeBasedKPIType"
            }
          }
        ],
        "requestBody": {
          "description": "Add time-based KPI request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeBasedKPIRequestDTO"
                },
                "description": "Add time-based KPI request"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeBasedKPIRequestDTO"
                },
                "description": "Add time-based KPI request"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeBasedKPIRequestDTO"
                },
                "description": "Add time-based KPI request"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TimeBasedKPIRequestDTO"
                },
                "description": "Add time-based KPI request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Get all time-based KPI last values for an asset",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of time-based KPI",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeBasedKPIType"
            }
          },
          {
            "name": "assetID",
            "in": "query",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_TimeBasedAnalytics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeBasedKPIResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeBasedAnalytics/KPI/{type}/{key}": {
      "get": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Get time-based KPI last values for an asset",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of time-based KPI",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeBasedKPIType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Time-based KPI key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Time-based KPI key",
              "nullable": true
            }
          },
          {
            "name": "assetID",
            "in": "query",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the asset",
              "format": "int32"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_TimeBasedAnalytics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeBasedKPIResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeBasedAnalytics/KPI/List/{type}/{key}": {
      "post": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Get time-based KPI last values for a list of assets",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of time-based KPI",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeBasedKPIType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Time-based KPI key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Time-based KPI key",
              "nullable": true
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_TimeBasedAnalytics"
            }
          }
        ],
        "requestBody": {
          "description": "A list containing one or more Asset IDs",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "A list containing one or more Asset IDs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeBasedKPIResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/TimeBasedAnalytics/KPI/Values/{type}/{key}": {
      "get": {
        "tags": [
          "TimeBasedAnalytics"
        ],
        "summary": "Get time-based KPI values for an asset",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of time-based KPI",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeBasedKPIType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Time-based KPI key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Time-based KPI key",
              "nullable": true
            }
          },
          {
            "name": "assetID",
            "in": "query",
            "description": "ID of the asset",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "ID of the asset",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Start date",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "End date",
              "format": "date-time"
            }
          },
          {
            "name": "FeatureCode",
            "in": "header",
            "description": "This parameter is required by subscription filtering",
            "required": true,
            "schema": {
              "type": "string",
              "default": "EXT_TimeBasedAnalytics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeBasedKPIResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/List": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of users",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get details of the current user",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update user details",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Detail": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get details of a particular user",
        "requestBody": {
          "description": "Name of the user",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValueRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Device": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of user devices",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDeviceResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Organization": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new organization and assign the current user to it",
        "requestBody": {
          "description": "Organization details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Assign the current user to an existing organization",
        "requestBody": {
          "description": "Organization details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove user from organization",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of organizations the user has access to",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/PrivateOrganization": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new private organization and assign the current user to it",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Convert the private organization of the user to a standard one",
        "requestBody": {
          "description": "Organization details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/OrganizationReference": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Assign user to the organization of the referenced user",
        "requestBody": {
          "description": "Organization details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationReferenceRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationReferenceRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationReferenceRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganizationReferenceRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Role": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of user roles for an organization",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32"
            }
          },
          {
            "name": "roleType",
            "in": "query",
            "description": "Type of the role, if 0 or Undefined returns the list unfiltered",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RoleType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/OrganizationHistory": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of organizations the user has been a part of",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Language": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of available languages",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLanguageResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/LandingPage": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the user starting page",
        "parameters": [
          {
            "name": "configurationName",
            "in": "query",
            "description": "Running Application",
            "schema": {
              "type": "string",
              "description": "Running Application",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LandingPageDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Delete": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send email to confirm deletion request",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Delete/{uniqueID}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Send email to confirm deletion request",
        "parameters": [
          {
            "name": "uniqueID",
            "in": "path",
            "description": "Unique id of the invitation",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique id of the invitation",
              "nullable": true
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Key": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of API Keys",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Generate an API Key",
        "parameters": [
          {
            "name": "apiKeyName",
            "in": "query",
            "description": "API Key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "API Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Add an API Key",
        "requestBody": {
          "description": "API Key details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete an API Key",
        "parameters": [
          {
            "name": "apiKeyID",
            "in": "query",
            "description": "API Key",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "API Key",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/Manage": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send email to request to become managed user",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/UserGroup": {
      "get": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Get a list of user groups",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Add a user group",
        "parameters": [
          {
            "name": "organizationID",
            "in": "query",
            "description": "Id of the organization",
            "schema": {
              "type": "integer",
              "description": "Id of the organization",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "User group details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/UserGroup/{id}": {
      "get": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Get the details of a user group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Edit a user group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user group",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User group details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Remove a user group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user group",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/UserGroup/User/{id}": {
      "put": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Add a user to a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user group",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupAddRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupAddRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupAddRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupAddRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Remove a user from a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user group",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "User details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupRemoveRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupRemoveRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupRemoveRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupRemoveRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Get a list of users from a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user group",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserWithRoleResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/UserGroup/AssetGroup": {
      "get": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Get a list o user groups for a asset group",
        "parameters": [
          {
            "name": "assetGroupID",
            "in": "query",
            "description": "Id of the asset group",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the asset group",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupWithRoleResponseDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/UserGroup/Invite": {
      "post": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Invite a user to a group",
        "requestBody": {
          "description": "Invitation details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupInviteRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupInviteRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupInviteRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserToGroupInviteRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserToGroupInviteResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/UserGroup/Invite/{uniqueID}": {
      "put": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Accept a user to group invitation\r\nReturns the ID of the organization joined",
        "parameters": [
          {
            "name": "uniqueID",
            "in": "path",
            "description": "Unique id of the invitation",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique id of the invitation",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOrganizationResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "412": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/UserProfile": {
      "put": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Update user profile with measure units",
        "requestBody": {
          "description": "User profile details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Update user profile with measure unit standard",
        "parameters": [
          {
            "name": "standard",
            "in": "query",
            "description": "User profile measure unit standard",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MeasurementUnitStandard"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Get the user profile with measure unit settings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivationCodeState": {
        "enum": [
          "Undefined",
          "New",
          "Printed",
          "Active",
          "Spent",
          "Expired",
          "Disabled"
        ],
        "type": "string",
        "description": "Enumeration for activation code status"
      },
      "SubscriptionLevelDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Subscription level name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Subscription level display name",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Subscription Type/Level ID",
            "format": "int32",
            "nullable": true
          }
        },
        "description": "Model that describes subscription level properties"
      },
      "SensorTypeDTO": {
        "type": "object",
        "properties": {
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "sensorTypeName": {
            "type": "string",
            "description": "Sensor type name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Sensor type display name",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor type"
      },
      "UserOrganizationResponseDTO": {
        "required": [
          "organizationName"
        ],
        "type": "object",
        "properties": {
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32",
            "nullable": true
          },
          "isPrivateOrgarnization": {
            "type": "boolean",
            "description": ""
          },
          "organizationName": {
            "type": "string",
            "description": "Organization Name",
            "nullable": true
          }
        },
        "description": "Model that describes an organization"
      },
      "ActivationCodeResponseDTO": {
        "required": [
          "subscriptionDurationMonth"
        ],
        "type": "object",
        "properties": {
          "activationCode": {
            "type": "string",
            "description": "Activation Code",
            "nullable": true
          },
          "userID": {
            "type": "integer",
            "description": "User ID that last updated the activation code",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "UserName that last updated the activation code",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor identifier",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/ActivationCodeState"
          },
          "subscriptionLevel": {
            "$ref": "#/components/schemas/SubscriptionLevelDTO"
          },
          "sensorType": {
            "$ref": "#/components/schemas/SensorTypeDTO"
          },
          "createdOn": {
            "type": "string",
            "description": "Activation code created on date",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "description": "Activation code expiration date",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "stateDate": {
            "type": "string",
            "description": "Last state change date",
            "format": "date-time"
          },
          "subscriptionDurationMonth": {
            "type": "integer",
            "description": "Duration of subscription for the current activation code in months",
            "format": "int32"
          }
        },
        "description": "Model that describes activation code response model"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "ActivationCodeListResponseDTO": {
        "type": "object",
        "properties": {
          "activationCodeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivationCodeResponseDTO"
            },
            "description": "Activation Code list",
            "nullable": true
          },
          "numberOfEntries": {
            "type": "integer",
            "description": "Number of filtered entries",
            "format": "int32"
          }
        },
        "description": "Model that describes activation code list response model"
      },
      "ActivationCodeAddRequestDTO": {
        "required": [
          "subscriptionDurationMonth",
          "subscriptionLevelID"
        ],
        "type": "object",
        "properties": {
          "numberOfCodesToBeCreated": {
            "type": "integer",
            "description": "Number of activation codes to be created",
            "format": "int32"
          },
          "subscriptionLevelID": {
            "type": "integer",
            "description": "Subscription Type/Level ID",
            "format": "int32"
          },
          "subscriptionDurationMonth": {
            "type": "integer",
            "description": "Duration of subscription for the current activation code in months",
            "format": "int32"
          }
        },
        "description": "Model that describes activation code create request class"
      },
      "ActivationCodeStateDTO": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/ActivationCodeState"
          },
          "userName": {
            "type": "string",
            "description": "UserName that last updated the activation code",
            "nullable": true
          },
          "stateDate": {
            "type": "string",
            "description": "Activation code created on date",
            "format": "date-time"
          }
        },
        "description": "Model that describes subscription code state model"
      },
      "AnomalyDetectionResponseDTO": {
        "type": "object",
        "properties": {
          "assetName": {
            "type": "string",
            "description": "Asset name",
            "nullable": true
          },
          "keyName": {
            "type": "string",
            "description": "Name of the anomaly detection",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "createdOn": {
            "type": "string",
            "description": "Created on date",
            "format": "date-time"
          },
          "key": {
            "type": "string",
            "description": "Key of the AssetKPI",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "A numeric real value between in interval [0 - 10], where 0 is no anomaly and 10 is highest anomaly",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": "Description of the anomaly details",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Labels to better describe / identify anomalies",
            "nullable": true
          }
        },
        "description": "Model that describes an anomaly detection item"
      },
      "AnomalyDetectionAddRequestDTO": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "createdOn": {
            "type": "string",
            "description": "Created on date",
            "format": "date-time"
          },
          "key": {
            "type": "string",
            "description": "Key of the AssetKPI",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "A numeric real value between in interval [0 - 10], where 0 is no anomaly and 10 is highest anomaly",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": "Description of the anomaly details",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Labels to better describe / identify anomalies",
            "nullable": true
          }
        },
        "description": "Model to add an anomaly detection item"
      },
      "AppLogFileContentDTO": {
        "required": [
          "isCompressed",
          "logFileContent"
        ],
        "type": "object",
        "properties": {
          "logFileContent": {
            "type": "string",
            "description": "Log file content as base64 string",
            "nullable": true
          },
          "isCompressed": {
            "type": "boolean",
            "description": "Value that indicates if the file log content is compressed"
          }
        },
        "description": ""
      },
      "LogType": {
        "enum": [
          "Undefined",
          "Backend",
          "Client",
          "Worker",
          "Database",
          "App",
          "Portal",
          "Gateway",
          "Ability",
          "ServIS",
          "SensorError"
        ],
        "type": "string",
        "description": "Available application log types"
      },
      "LogLevel": {
        "enum": [
          "Undefined",
          "Error",
          "Warning",
          "Info",
          "Debug"
        ],
        "type": "string",
        "description": "Available application log levels"
      },
      "AppLogRequestDTO": {
        "required": [
          "appVersion",
          "deviceUID",
          "logType",
          "osVersion"
        ],
        "type": "object",
        "properties": {
          "osVersion": {
            "type": "string",
            "description": "Operating System Version",
            "nullable": true
          },
          "appVersion": {
            "type": "string",
            "description": "Application Version",
            "nullable": true
          },
          "appBuildType": {
            "type": "string",
            "description": "Application Build Type",
            "nullable": true
          },
          "feedbackMessage": {
            "type": "string",
            "description": "Feedback Message",
            "nullable": true
          },
          "logFile": {
            "$ref": "#/components/schemas/AppLogFileContentDTO"
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "logType": {
            "$ref": "#/components/schemas/LogType"
          },
          "logLevel": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "error": {
            "type": "string",
            "description": "error",
            "nullable": true
          }
        },
        "description": "Model to add an application log file"
      },
      "AppLogResponseDTO": {
        "required": [
          "deviceUID",
          "logType"
        ],
        "type": "object",
        "properties": {
          "logID": {
            "type": "integer",
            "description": "log ID",
            "format": "int32"
          },
          "logMessage": {
            "type": "string",
            "description": "log Message",
            "nullable": true
          },
          "module": {
            "type": "string",
            "description": "module",
            "nullable": true
          },
          "method": {
            "type": "string",
            "description": "method",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "timestamp",
            "format": "date-time"
          },
          "userID": {
            "type": "integer",
            "description": "userID",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "userName",
            "nullable": true
          },
          "trace": {
            "type": "string",
            "description": "trace",
            "nullable": true
          },
          "deviceType": {
            "type": "string",
            "description": "device Type",
            "nullable": true
          },
          "hasAttachment": {
            "type": "boolean",
            "description": "has attachment"
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "logType": {
            "$ref": "#/components/schemas/LogType"
          },
          "logLevel": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "error": {
            "type": "string",
            "description": "error",
            "nullable": true
          }
        },
        "description": "Model that describes an application log file"
      },
      "AssetPropertyValueRequestDTO": {
        "type": "object",
        "properties": {
          "assetPropertyValue": {
            "type": "object",
            "description": "Asset Property Value",
            "nullable": true
          },
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          }
        },
        "description": "Mode that describes an asset property with value"
      },
      "AssetAddRequestDTO": {
        "required": [
          "assetGroupID",
          "assetName",
          "assetProperties",
          "assetTypeID",
          "configurationProfileIDs",
          "createdOn",
          "firmwareVersion",
          "organizationID",
          "plantID",
          "sensorIdentifier",
          "sensorTypeID",
          "uniqueID"
        ],
        "type": "object",
        "properties": {
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Created On",
            "format": "date-time"
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "assetGroupID": {
            "type": "integer",
            "description": "The id of the group to assign the asset to",
            "format": "int32"
          },
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueRequestDTO"
            },
            "description": "List of asset properties",
            "nullable": true
          },
          "configurationProfileIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Configuration Profile IDs",
            "nullable": true
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "isFavourite": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this is favourite."
          },
          "resetSensor": {
            "type": "boolean",
            "description": "Flag indicating sensor reset",
            "nullable": true
          },
          "resetTimestamp": {
            "type": "string",
            "description": "Timestamp of sensor reset",
            "format": "date-time",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "assetName": {
            "maxLength": 40,
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32"
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          }
        },
        "description": "Model for adding an asset"
      },
      "AssetLabelResponseDTO": {
        "required": [
          "labelValue"
        ],
        "type": "object",
        "properties": {
          "labelID": {
            "type": "integer",
            "description": "Label ID",
            "format": "int32"
          },
          "labelAssignedOn": {
            "type": "string",
            "description": "Label Assigned On",
            "format": "date-time"
          },
          "labelValue": {
            "type": "string",
            "description": "Label Value",
            "nullable": true
          }
        },
        "description": "Model that describes an asset label"
      },
      "PictureSize": {
        "enum": [
          "FullSize",
          "ReducedSize",
          "Thumbnail"
        ],
        "type": "string",
        "description": "Available picture sizes"
      },
      "AssetPicturePathResponseDTO": {
        "type": "object",
        "properties": {
          "size": {
            "$ref": "#/components/schemas/PictureSize"
          },
          "path": {
            "type": "string",
            "description": "Picture location",
            "nullable": true
          }
        },
        "description": "Model that describes an asset picture path"
      },
      "AssetPictureType": {
        "enum": [
          "Undefined",
          "AssetImage",
          "NameplateImage",
          "Attachment"
        ],
        "type": "string",
        "description": "Available asset picture types"
      },
      "AssetPictureResponseDTO": {
        "required": [
          "pictureType",
          "uniqueID"
        ],
        "type": "object",
        "properties": {
          "picturePath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPicturePathResponseDTO"
            },
            "description": "Picture path",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the picture",
            "format": "date-time",
            "nullable": true
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "pictureType": {
            "$ref": "#/components/schemas/AssetPictureType"
          }
        },
        "description": "Model that describes an asset picture"
      },
      "ConditionIndexStatus": {
        "enum": [
          "NotApplicable",
          "Unknown",
          "Good",
          "Tolerable",
          "Poor"
        ],
        "type": "string",
        "description": "Enumeration for condition index statuses"
      },
      "ConditionIndexStatusDTO": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ConditionIndexStatus"
          },
          "statusCode": {
            "type": "string",
            "description": "Health status unique identifier for message",
            "nullable": true
          },
          "statusCodeMessage": {
            "type": "string",
            "description": "Health status message that explains why we have current status",
            "nullable": true
          }
        },
        "description": "Model that describes the status of a condition index"
      },
      "ConditionIndexDTO": {
        "type": "object",
        "properties": {
          "conditionIndexStatus": {
            "$ref": "#/components/schemas/ConditionIndexStatusDTO"
          },
          "conditionIndexKey": {
            "type": "string",
            "description": "Condition index key",
            "nullable": true
          },
          "conditionIndexName": {
            "type": "string",
            "description": "Condition index name",
            "nullable": true
          }
        },
        "description": "Model that describes a condition index"
      },
      "MeasurementUnitGroupDTO": {
        "type": "object",
        "properties": {
          "measurementUnitGroupID": {
            "type": "integer",
            "description": "Measurement Unit Group ID",
            "format": "int32"
          },
          "measurementUnitGroupName": {
            "type": "string",
            "description": "Measurement Unit Group Name",
            "nullable": true
          },
          "measurementUnitDefault": {
            "type": "string",
            "description": "Default measurement unit",
            "nullable": true
          }
        },
        "description": "Model that describes a measure unit group"
      },
      "AssetPropertyValueResponseDTO": {
        "type": "object",
        "properties": {
          "assetPropertyValue": {
            "type": "object",
            "description": "Asset Property Value",
            "nullable": true
          },
          "assetPropertyDataType": {
            "type": "string",
            "description": "Asset Property Data Type",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the Asset Property is enabled"
          },
          "assetPropertyAvailableValueID": {
            "type": "integer",
            "description": "Asset Property Available Value ID",
            "format": "int32",
            "nullable": true
          },
          "assetPropertyName": {
            "type": "string",
            "description": "Asset Property Display Name",
            "nullable": true
          },
          "assetPropertyPrecision": {
            "type": "integer",
            "description": "Asset Property Precision",
            "format": "int32"
          },
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "assetPropertySequenceNr": {
            "type": "integer",
            "description": "Asset Property Sequence Number",
            "format": "int32"
          },
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          }
        },
        "description": ""
      },
      "AssetHealthStatus": {
        "enum": [
          "Undefined",
          "Healthy",
          "Weak",
          "Critical"
        ],
        "type": "string",
        "description": "Enumeration for asset health statuses"
      },
      "HealthStatusDTO": {
        "type": "object",
        "properties": {
          "healthCode": {
            "$ref": "#/components/schemas/AssetHealthStatus"
          },
          "healthColor": {
            "type": "string",
            "description": "Health Color",
            "nullable": true
          }
        },
        "description": "Model that describes the health"
      },
      "QualityFlag": {
        "enum": [
          "NotValidated",
          "OutOfRange",
          "OutOfOperationBoundaries",
          "Success"
        ],
        "type": "string",
        "description": "Enumeration for quality indexes"
      },
      "AssetMeasurementResponseDTO": {
        "type": "object",
        "properties": {
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "measurementTypeCode": {
            "type": "string",
            "description": "Measurement Type Code",
            "nullable": true
          },
          "measurementTypeName": {
            "type": "string",
            "description": "Measurement Type Name",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "description": "Time Stamp",
            "format": "date-time",
            "nullable": true
          },
          "measurementValue": {
            "type": "object",
            "description": "Measurement Value",
            "nullable": true
          },
          "measurementCalibration": {
            "type": "number",
            "description": "Measurement Calibration Offset",
            "format": "double",
            "nullable": true
          },
          "isCalibrationEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is offsetable"
          },
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatusDTO"
          },
          "measurementTypeUnitGroupID": {
            "type": "integer",
            "description": "Measurement Type Unit Group ID",
            "format": "int32",
            "nullable": true
          },
          "measurementTypeUnitGroupName": {
            "type": "string",
            "description": "Measurement Type Unit Group Name",
            "nullable": true
          },
          "isEditable": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is editable"
          },
          "isHealthParameter": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is a health parameter"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is visible"
          },
          "isCumulative": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is a cumulative parameter"
          },
          "uniqueID": {
            "type": "string",
            "description": "Measurement Unique ID",
            "nullable": true
          },
          "measurementTypePrecision": {
            "type": "integer",
            "description": "Measurement Type Precision",
            "format": "int32"
          },
          "enableDataValidation": {
            "type": "boolean",
            "description": "Enable Data Validation"
          },
          "qualityFlag": {
            "$ref": "#/components/schemas/QualityFlag"
          },
          "measurementTypeDescription": {
            "type": "string",
            "description": "Description of measurement Type",
            "nullable": true
          },
          "measurementTypeSequenceNo": {
            "type": "integer",
            "description": "Measurement Type Sequence Number",
            "format": "int32"
          },
          "measurementTypeDataType": {
            "type": "string",
            "description": "Measurement Type Data Type",
            "nullable": true
          }
        },
        "description": "Model that describes a measurement type"
      },
      "FirmwareUpdateResponseDTO": {
        "type": "object",
        "properties": {
          "updateAvailable": {
            "type": "boolean",
            "description": "Flag that indicates if a firmware update is available"
          },
          "updateFirmwareID": {
            "type": "integer",
            "description": "Firmware ID available for update",
            "format": "int32"
          },
          "updateFirmwareVersion": {
            "type": "string",
            "description": "Firmware version available for update",
            "nullable": true
          }
        },
        "description": "Model that describes firmware update for assets"
      },
      "HardwareRevisionResponseDTO": {
        "type": "object",
        "properties": {
          "hardwareRevisionID": {
            "type": "integer",
            "description": "Hardware Revision ID",
            "format": "int32"
          },
          "hardwareRevisionName": {
            "type": "string",
            "description": "Hardware Revision Name",
            "nullable": true
          }
        },
        "description": "Model that describes a hardware revision"
      },
      "SensorFeatureValueResponseDTO": {
        "type": "object",
        "properties": {
          "featureKey": {
            "type": "string",
            "description": "Feature Type Key",
            "nullable": true
          },
          "featureValue": {
            "type": "object",
            "description": "Feature Value",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Value that indicates if the feature type is visible"
          },
          "featureName": {
            "type": "string",
            "description": "Feature Type Name",
            "nullable": true
          },
          "featureKeySequenceNo": {
            "type": "integer",
            "description": "Feature Key Sequence Number",
            "format": "int32"
          }
        },
        "description": "Model that describes a sensor feature with value entry"
      },
      "SensorPropertyValueResponseDTO": {
        "type": "object",
        "properties": {
          "propertyValue": {
            "type": "object",
            "description": "Property Value",
            "nullable": true
          },
          "propertyKey": {
            "type": "string",
            "description": "Property Type Key",
            "nullable": true
          },
          "propertyName": {
            "type": "string",
            "description": "Property Type Name",
            "nullable": true
          },
          "propertyKeySequenceNo": {
            "type": "integer",
            "description": "Property Key Sequence Number",
            "format": "int32"
          },
          "propertyDataType": {
            "type": "string",
            "description": "Property Data Type",
            "nullable": true
          },
          "propertyIsVisible": {
            "type": "boolean",
            "description": "Value that indicates if the property is visible"
          },
          "propertyIsDataList": {
            "type": "boolean",
            "description": "Value that indicates if the property is a data list (CSV)"
          }
        },
        "description": "Model that describes a property value for a sensor"
      },
      "SensorActiveSubscriptionResponseDTO": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Subscription Start Date",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "Subscription End Date",
            "format": "date-time",
            "nullable": true
          },
          "hasAvailableSubscriptions": {
            "type": "boolean",
            "description": "Describes if there are other subscriptions avaiable"
          },
          "activationCode": {
            "type": "string",
            "description": "Subscription activation code",
            "nullable": true
          },
          "isBasicSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have basic subscription level"
          },
          "isTrialSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have trial subscription level"
          },
          "isLifetimeSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have lifetime subscription level"
          },
          "subscriptionLevel": {
            "$ref": "#/components/schemas/SubscriptionLevelDTO"
          }
        },
        "description": "Model that describes sensor subscription"
      },
      "SensorDetailsResponseDTO": {
        "type": "object",
        "properties": {
          "sensorIdentifier": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "hardware": {
            "$ref": "#/components/schemas/HardwareRevisionResponseDTO"
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version.",
            "nullable": true
          },
          "commissioningDate": {
            "type": "string",
            "description": "Commissioning date",
            "format": "date-time",
            "nullable": true
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorFeatureValueResponseDTO"
            },
            "description": "Sensor feature values",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorPropertyValueResponseDTO"
            },
            "description": "Sensor property values",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SensorActiveSubscriptionResponseDTO"
          },
          "featureEditAllowedBySubscription": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "Sensor feature keys (key) and their permissions (value) to be edited by subscription",
            "nullable": true
          }
        },
        "description": "Model that describes sensor details"
      },
      "ConfigurationProfileDTO": {
        "type": "object",
        "properties": {
          "configurationProfileID": {
            "type": "integer",
            "description": "Id of the configuration profile",
            "format": "int32"
          },
          "configurationProfileName": {
            "type": "string",
            "description": "Name of the configuration profile",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "description": "Configuration profile visibility flag"
          },
          "minimumFirmwareVersion": {
            "type": "string",
            "description": "Configuration profile min firmware version",
            "nullable": true
          }
        },
        "description": "Model that describes a configuration profile"
      },
      "AssetTypeDTO": {
        "type": "object",
        "properties": {
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "assetTypeName": {
            "type": "string",
            "description": "Asset Type Name",
            "nullable": true
          },
          "assetTypeDescription": {
            "type": "string",
            "description": "Display name of the asset type",
            "nullable": true
          }
        },
        "description": "Model that describes an asset type"
      },
      "AssetExtendedResponseDTO": {
        "type": "object",
        "properties": {
          "assetGroupName": {
            "type": "string",
            "description": "Asset Group Name",
            "nullable": true
          },
          "isGroup": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this asset is part of a group"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetLabelResponseDTO"
            },
            "description": "List of labels (key-value pair)",
            "nullable": true
          },
          "assetPictures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPictureResponseDTO"
            },
            "description": "list of asset Pictures (key-value pair)",
            "nullable": true
          },
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionIndexDTO"
            },
            "description": "List of available Condition Indexes",
            "nullable": true
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueResponseDTO"
            },
            "description": "List of asset nameplate values",
            "nullable": true
          },
          "measurements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetMeasurementResponseDTO"
            },
            "description": "list of measurement types with values",
            "nullable": true
          },
          "firmwareUpdate": {
            "$ref": "#/components/schemas/FirmwareUpdateResponseDTO"
          },
          "sensor": {
            "$ref": "#/components/schemas/SensorDetailsResponseDTO"
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationProfileDTO"
            },
            "description": "Configuration Profiles",
            "nullable": true
          },
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatusDTO"
          },
          "assetType": {
            "$ref": "#/components/schemas/AssetTypeDTO"
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "plantName": {
            "type": "string",
            "description": "plant Name",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site Identifier",
            "nullable": true
          },
          "isFavourite": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this is favourite."
          },
          "createdOn": {
            "type": "string",
            "description": "Created On",
            "format": "date-time"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Last Update On",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "lastSyncTimeStamp": {
            "type": "string",
            "description": "Last Sync Timestamp",
            "format": "date-time",
            "nullable": true
          },
          "isPowerTrainComponent": {
            "type": "boolean",
            "description": "Gets a value indicating whether this asset is part of a powertrain."
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "assetGroupID": {
            "type": "integer",
            "description": "ID of Asset Group",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleID": {
            "type": "integer",
            "description": "Id of the asset responsible user",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleName": {
            "type": "string",
            "description": "UserName of the asset responsible user",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "isMonitored": {
            "type": "boolean",
            "description": "Is Monitored"
          }
        },
        "description": "Extended Model that describes an asset, including nameplates, labels and pictures"
      },
      "AssetUnmonitoredAddRequestDTO": {
        "required": [
          "assetGroupID",
          "assetName",
          "assetTypeID",
          "organizationID",
          "plantID"
        ],
        "type": "object",
        "properties": {
          "assetGroupID": {
            "type": "integer",
            "description": "Asset Group ID",
            "format": "int32"
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "assetName": {
            "maxLength": 40,
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32"
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          }
        },
        "description": "Model that describes an unmonitored asset add request"
      },
      "AssetResponseDTO": {
        "type": "object",
        "properties": {
          "assetType": {
            "$ref": "#/components/schemas/AssetTypeDTO"
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "plantName": {
            "type": "string",
            "description": "plant Name",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site Identifier",
            "nullable": true
          },
          "isFavourite": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this is favourite."
          },
          "createdOn": {
            "type": "string",
            "description": "Created On",
            "format": "date-time"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Last Update On",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "lastSyncTimeStamp": {
            "type": "string",
            "description": "Last Sync Timestamp",
            "format": "date-time",
            "nullable": true
          },
          "isPowerTrainComponent": {
            "type": "boolean",
            "description": "Gets a value indicating whether this asset is part of a powertrain."
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "assetGroupID": {
            "type": "integer",
            "description": "ID of Asset Group",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleID": {
            "type": "integer",
            "description": "Id of the asset responsible user",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleName": {
            "type": "string",
            "description": "UserName of the asset responsible user",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "isMonitored": {
            "type": "boolean",
            "description": "Is Monitored"
          }
        },
        "description": "Model that describes an asset"
      },
      "AssetEditRequestDTO": {
        "required": [
          "assetName",
          "assetProperties",
          "updatedOn"
        ],
        "type": "object",
        "properties": {
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "updatedOn": {
            "type": "string",
            "description": "Updated On",
            "format": "date-time"
          },
          "isFavourite": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this is favourite.",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "assetName": {
            "maxLength": 40,
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueRequestDTO"
            },
            "description": "List of asset properties",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "configurationProfileIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Configuration Profile IDs",
            "nullable": true
          }
        },
        "description": "Model for editing an asset"
      },
      "AssetDeleteRequestDTO": {
        "type": "object",
        "properties": {
          "reasonID": {
            "type": "integer",
            "description": "Delete Reason ID",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "description": "Delete Comment",
            "nullable": true
          },
          "resetSensor": {
            "type": "boolean",
            "description": "Flag indicating sensor reset"
          },
          "resetTimestamp": {
            "type": "string",
            "description": "Timestamp of sensor reset",
            "format": "date-time",
            "nullable": true
          }
        },
        "description": "Model for deleting an asset"
      },
      "CapabilityBaseDTO": {
        "required": [
          "capabilityCode",
          "capabilityName"
        ],
        "type": "object",
        "properties": {
          "capabilityName": {
            "type": "string",
            "description": "Capability Name",
            "nullable": true
          },
          "capabilityCode": {
            "type": "string",
            "description": "Capability Code",
            "nullable": true
          }
        },
        "description": "Base model for capabilities"
      },
      "AssetCapabilityResponseDTO": {
        "type": "object",
        "properties": {
          "sensorSubscription": {
            "$ref": "#/components/schemas/SensorActiveSubscriptionResponseDTO"
          },
          "assetCapabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityBaseDTO"
            },
            "description": "Asset Capabilities based on subscription",
            "nullable": true
          },
          "assetType": {
            "$ref": "#/components/schemas/AssetTypeDTO"
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "isMonitored": {
            "type": "boolean",
            "description": "Is Monitored"
          }
        },
        "description": "Asset Model that describes an asset, including capabilities and sensor subscription information"
      },
      "AssetSimpleResponseDTO": {
        "type": "object",
        "properties": {
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "isMonitored": {
            "type": "boolean",
            "description": "Is Monitored"
          }
        },
        "description": "Model that describes an asset"
      },
      "AssetWithHealthResponseDTO": {
        "type": "object",
        "properties": {
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatusDTO"
          },
          "assetType": {
            "$ref": "#/components/schemas/AssetTypeDTO"
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "plantName": {
            "type": "string",
            "description": "plant Name",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site Identifier",
            "nullable": true
          },
          "isFavourite": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this is favourite."
          },
          "createdOn": {
            "type": "string",
            "description": "Created On",
            "format": "date-time"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Last Update On",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "lastSyncTimeStamp": {
            "type": "string",
            "description": "Last Sync Timestamp",
            "format": "date-time",
            "nullable": true
          },
          "isPowerTrainComponent": {
            "type": "boolean",
            "description": "Gets a value indicating whether this asset is part of a powertrain."
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "assetGroupID": {
            "type": "integer",
            "description": "ID of Asset Group",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleID": {
            "type": "integer",
            "description": "Id of the asset responsible user",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleName": {
            "type": "string",
            "description": "UserName of the asset responsible user",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "isMonitored": {
            "type": "boolean",
            "description": "Is Monitored"
          }
        },
        "description": ""
      },
      "AssetSensorResponseDTO": {
        "type": "object",
        "properties": {
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueResponseDTO"
            },
            "description": "List of asset nameplate values",
            "nullable": true
          },
          "measurements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetMeasurementResponseDTO"
            },
            "description": "list of measurement types with values",
            "nullable": true
          },
          "firmwareUpdate": {
            "$ref": "#/components/schemas/FirmwareUpdateResponseDTO"
          },
          "sensor": {
            "$ref": "#/components/schemas/SensorDetailsResponseDTO"
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationProfileDTO"
            },
            "description": "Configuration Profiles",
            "nullable": true
          },
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatusDTO"
          },
          "assetType": {
            "$ref": "#/components/schemas/AssetTypeDTO"
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "plantName": {
            "type": "string",
            "description": "plant Name",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site Identifier",
            "nullable": true
          },
          "isFavourite": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this is favourite."
          },
          "createdOn": {
            "type": "string",
            "description": "Created On",
            "format": "date-time"
          },
          "lastUpdatedOn": {
            "type": "string",
            "description": "Last Update On",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "lastSyncTimeStamp": {
            "type": "string",
            "description": "Last Sync Timestamp",
            "format": "date-time",
            "nullable": true
          },
          "isPowerTrainComponent": {
            "type": "boolean",
            "description": "Gets a value indicating whether this asset is part of a powertrain."
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "assetGroupID": {
            "type": "integer",
            "description": "ID of Asset Group",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleID": {
            "type": "integer",
            "description": "Id of the asset responsible user",
            "format": "int32",
            "nullable": true
          },
          "assetResponsibleName": {
            "type": "string",
            "description": "UserName of the asset responsible user",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "Serial Number",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Asset Description",
            "nullable": true
          },
          "isMonitored": {
            "type": "boolean",
            "description": "Is Monitored"
          }
        },
        "description": "Model that describes asset with sensor information"
      },
      "AssetToGroupRequestDTO": {
        "required": [
          "assetGroupID"
        ],
        "type": "object",
        "properties": {
          "assetGroupID": {
            "type": "integer",
            "description": "The id of the group to assign the asset to",
            "format": "int32"
          }
        },
        "description": "Model to assign an asset to a group"
      },
      "AssetMeasurementGroupResponseDTO": {
        "type": "object",
        "properties": {
          "measurementTypeGroupName": {
            "type": "string",
            "description": "Measurement Type Group Name",
            "nullable": true
          },
          "measurementTypeGroupCode": {
            "type": "string",
            "description": "Measurement Type Group Code",
            "nullable": true
          },
          "measurementTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetMeasurementResponseDTO"
            },
            "description": "List of measurement types",
            "nullable": true
          }
        },
        "description": "Model that describes measurement type groups"
      },
      "DeviceStatus": {
        "enum": [
          "Undefined",
          "Online",
          "Offline",
          "Warning"
        ],
        "type": "string",
        "description": "Enumeration for device statuses"
      },
      "DeviceType": {
        "enum": [
          "Undefined",
          "Mobile",
          "Gateway"
        ],
        "type": "string",
        "description": "Available device types"
      },
      "AssetDeviceResponseDTO": {
        "required": [
          "appVersion",
          "deviceUID",
          "manufacturer",
          "model",
          "osType",
          "osVersion"
        ],
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "lastOnlineStatus": {
            "type": "boolean",
            "description": "Last online status",
            "nullable": true
          },
          "lastOnlineTime": {
            "type": "string",
            "description": "Date and time when last online status was required",
            "format": "date-time",
            "nullable": true
          },
          "lastDeviceStatus": {
            "$ref": "#/components/schemas/DeviceStatus"
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer",
            "nullable": true
          },
          "model": {
            "type": "string",
            "description": "Model",
            "nullable": true
          },
          "osType": {
            "type": "string",
            "description": "Operating System Type",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "description": "Operating System Version",
            "nullable": true
          },
          "appVersion": {
            "type": "string",
            "description": "Application Version",
            "nullable": true
          },
          "deviceCategoryID": {
            "type": "integer",
            "description": "Category ID of the device",
            "format": "int32",
            "nullable": true
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "description": {
            "type": "string",
            "description": "Device description",
            "nullable": true
          },
          "deviceName": {
            "type": "string",
            "description": "Device name",
            "nullable": true
          },
          "deviceCategoryName": {
            "type": "string",
            "description": "Category name of the device",
            "nullable": true
          }
        },
        "description": "Model that describes last device used for asset load measurments"
      },
      "AssetFilterDTO": {
        "required": [
          "assetGroups",
          "assetTypes",
          "organizations",
          "plants"
        ],
        "type": "object",
        "properties": {
          "organizations": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of organization id's",
            "nullable": true
          },
          "plants": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of plant id's",
            "nullable": true
          },
          "assetGroups": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of asset group id's",
            "nullable": true
          },
          "assetTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of asset types",
            "nullable": true
          }
        },
        "description": "Model for sending asset filters"
      },
      "KeyValueResponseDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "String key",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "String value",
            "nullable": true
          }
        },
        "description": "Model for key value response"
      },
      "SparePartItemDTO": {
        "type": "object",
        "properties": {
          "item": {
            "type": "string",
            "description": "Item",
            "nullable": true
          },
          "partCode": {
            "type": "string",
            "description": "Part Code",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "description": "Product Name",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity",
            "format": "int32"
          }
        },
        "description": "Model that describes a spare part item"
      },
      "SensorReplaceRequestDTO": {
        "required": [
          "configurationProfileIDs"
        ],
        "type": "object",
        "properties": {
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "updateSubscription": {
            "type": "boolean",
            "description": "Flag that indicates if the subscription should be updated"
          },
          "configurationProfileIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Configuration Profile IDs",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor replacement"
      },
      "AssetLabelAddRequestDTO": {
        "required": [
          "labelValue"
        ],
        "type": "object",
        "properties": {
          "labelValue": {
            "type": "string",
            "description": "Label Value",
            "nullable": true
          }
        },
        "description": "Model to add a label to an asset"
      },
      "AssetLabelRemoveRequestDTO": {
        "required": [
          "labelID"
        ],
        "type": "object",
        "properties": {
          "labelID": {
            "type": "integer",
            "description": "Label ID",
            "format": "int32"
          }
        },
        "description": "Model to remove a label from an asset"
      },
      "AssetLabelListResponseDTO": {
        "required": [
          "labelValue"
        ],
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetResponseDTO"
            },
            "description": "List of assets associated",
            "nullable": true
          },
          "labelID": {
            "type": "integer",
            "description": "Label ID",
            "format": "int32"
          },
          "labelAssignedOn": {
            "type": "string",
            "description": "Label Assigned On",
            "format": "date-time"
          },
          "labelValue": {
            "type": "string",
            "description": "Label Value",
            "nullable": true
          }
        },
        "description": "Model that describes a label with assets associated"
      },
      "AssetPictureRequestDTO": {
        "required": [
          "pictureType",
          "uniqueID"
        ],
        "type": "object",
        "properties": {
          "fileContent": {
            "type": "string",
            "description": "Content of the picture in base64 format",
            "nullable": true
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "pictureType": {
            "$ref": "#/components/schemas/AssetPictureType"
          }
        },
        "description": "Model to add an asset picture"
      },
      "BearingDataResponseDTO": {
        "type": "object",
        "properties": {
          "meanRollerDiameter": {
            "type": "number",
            "description": "",
            "format": "float"
          },
          "pitchDiameter": {
            "type": "number",
            "description": "",
            "format": "float"
          },
          "contactAngle": {
            "type": "number",
            "description": "",
            "format": "float"
          },
          "numberOfRollers": {
            "type": "integer",
            "description": "",
            "format": "int32"
          }
        },
        "description": ""
      },
      "BearingDataRequestDTO": {
        "type": "object",
        "properties": {
          "bearingPartNumber": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "meanRollerDiameter": {
            "type": "number",
            "description": "",
            "format": "float"
          },
          "pitchDiameter": {
            "type": "number",
            "description": "",
            "format": "float"
          },
          "contactAngle": {
            "type": "number",
            "description": "",
            "format": "float"
          },
          "numberOfRollers": {
            "type": "integer",
            "description": "",
            "format": "int32"
          }
        },
        "description": ""
      },
      "AssetGroupRequestDTO": {
        "required": [
          "assetGroupName",
          "organizationID"
        ],
        "type": "object",
        "properties": {
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "assetGroupName": {
            "maxLength": 100,
            "type": "string",
            "description": "Asset Group Name",
            "nullable": true
          }
        },
        "description": "Model for adding asset groups"
      },
      "AssetGroupResponseDTO": {
        "required": [
          "assetGroupName"
        ],
        "type": "object",
        "properties": {
          "assetGroupID": {
            "type": "integer",
            "description": "Asset Group ID",
            "format": "int32"
          },
          "assetGroupParentName": {
            "type": "string",
            "description": "Asset Group Parent Name",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "isMaster": {
            "type": "boolean",
            "description": "Flag to show if asset group is master"
          },
          "assetGroupParentID": {
            "type": "integer",
            "description": "Asset Group Parent ID",
            "format": "int32"
          },
          "assetGroupName": {
            "maxLength": 100,
            "type": "string",
            "description": "Asset Group Name",
            "nullable": true
          }
        },
        "description": "Model that describes an asset group"
      },
      "AssetGroupWithCountResponseDTO": {
        "required": [
          "assetGroupName"
        ],
        "type": "object",
        "properties": {
          "assetCount": {
            "type": "integer",
            "description": "Count of assets in that group",
            "format": "int32"
          },
          "assetGroupID": {
            "type": "integer",
            "description": "Asset Group ID",
            "format": "int32"
          },
          "assetGroupParentName": {
            "type": "string",
            "description": "Asset Group Parent Name",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "isMaster": {
            "type": "boolean",
            "description": "Flag to show if asset group is master"
          },
          "assetGroupParentID": {
            "type": "integer",
            "description": "Asset Group Parent ID",
            "format": "int32"
          },
          "assetGroupName": {
            "maxLength": 100,
            "type": "string",
            "description": "Asset Group Name",
            "nullable": true
          }
        },
        "description": "Model that describes an asset group"
      },
      "UserGroupToAssetGroupAddRequestDTO": {
        "required": [
          "roleID",
          "userGroupID"
        ],
        "type": "object",
        "properties": {
          "roleID": {
            "type": "integer",
            "description": "Role ID",
            "format": "int32"
          },
          "userGroupID": {
            "type": "integer",
            "description": "User Group ID",
            "format": "int32"
          }
        },
        "description": "Model to add a user group to an asset group"
      },
      "UserGroupToAssetGroupRemoveRequestDTO": {
        "required": [
          "userGroupID"
        ],
        "type": "object",
        "properties": {
          "userGroupID": {
            "type": "integer",
            "description": "User Group ID",
            "format": "int32"
          }
        },
        "description": "Model to remove a user group from an asset group"
      },
      "DataSourceType": {
        "enum": [
          "CommonSensor_DS",
          "RCM_DS",
          "RCM_4_DS"
        ],
        "type": "string",
        "description": "Enumeration for PowerTrain Data Source types"
      },
      "AssetTypeExtendedDTO": {
        "type": "object",
        "properties": {
          "dataSourceID": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "assetDetailsURL": {
            "type": "string",
            "description": "External URL for assets of this Asset Type",
            "nullable": true
          },
          "externalTypeID": {
            "type": "string",
            "description": "External Asset Type ID",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "assetTypeName": {
            "type": "string",
            "description": "Asset Type Name",
            "nullable": true
          },
          "assetTypeDescription": {
            "type": "string",
            "description": "Display name of the asset type",
            "nullable": true
          }
        },
        "description": "Model that describes Extended Asset Type"
      },
      "AssetPropertyResponseDTO": {
        "type": "object",
        "properties": {
          "assetPropertyDescription": {
            "type": "string",
            "description": "Asset Property Description",
            "nullable": true
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Value that indicates if the Asset Property is mandatory"
          },
          "assetPropertyDataType": {
            "type": "string",
            "description": "Asset Property Data Type",
            "nullable": true
          },
          "assetPropertyControlType": {
            "type": "string",
            "description": "Asset Property Control Type",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the Asset Property is enabled"
          },
          "assetPropertyGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset Property Groups",
            "nullable": true
          },
          "validationExpression": {
            "type": "string",
            "description": "Regular expression that defines the asset property",
            "nullable": true
          },
          "validationDescription": {
            "type": "string",
            "description": "Error message to be dislayed when the property value doesn't match the regular expression.",
            "nullable": true
          },
          "assetPropertyName": {
            "type": "string",
            "description": "Asset Property Display Name",
            "nullable": true
          },
          "assetPropertyPrecision": {
            "type": "integer",
            "description": "Asset Property Precision",
            "format": "int32"
          },
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "assetPropertySequenceNr": {
            "type": "integer",
            "description": "Asset Property Sequence Number",
            "format": "int32"
          },
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          }
        },
        "description": "Mode that describes an asset property"
      },
      "AssetPropertyRequestDTO": {
        "type": "object",
        "properties": {
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          }
        },
        "description": "Mode that describes an asset property"
      },
      "AssetPropertyIdentifierValueDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Key",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value",
            "nullable": true
          }
        },
        "description": "Model that describes an identifier value for an asset property"
      },
      "AssetPropertySuggestedValueDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object",
            "description": "Asset Property Suggested Values",
            "nullable": true
          },
          "relatedProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueRequestDTO"
            },
            "description": "Asset Related Property Values",
            "nullable": true
          }
        },
        "description": "Model that describes all related properties for a suggested value"
      },
      "PackageDropAssetPropertyDTO": {
        "type": "object",
        "properties": {
          "availableValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyIdentifierValueDTO"
            },
            "description": "Available values",
            "nullable": true
          },
          "suggestedValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertySuggestedValueDTO"
            },
            "description": "Asset Property Suggested values",
            "nullable": true
          },
          "assetPropertyDescription": {
            "type": "string",
            "description": "Asset Property Description",
            "nullable": true
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Value that indicates if the Asset Property is mandatory"
          },
          "assetPropertyDataType": {
            "type": "string",
            "description": "Asset Property Data Type",
            "nullable": true
          },
          "assetPropertyControlType": {
            "type": "string",
            "description": "Asset Property Control Type",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the Asset Property is enabled"
          },
          "assetPropertyGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Asset Property Groups",
            "nullable": true
          },
          "validationExpression": {
            "type": "string",
            "description": "Regular expression that defines the asset property",
            "nullable": true
          },
          "validationDescription": {
            "type": "string",
            "description": "Error message to be dislayed when the property value doesn't match the regular expression.",
            "nullable": true
          },
          "assetPropertyName": {
            "type": "string",
            "description": "Asset Property Display Name",
            "nullable": true
          },
          "assetPropertyPrecision": {
            "type": "integer",
            "description": "Asset Property Precision",
            "format": "int32"
          },
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "assetPropertySequenceNr": {
            "type": "integer",
            "description": "Asset Property Sequence Number",
            "format": "int32"
          },
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          }
        },
        "description": ""
      },
      "EventLogSubTypeResponseDTO": {
        "type": "object",
        "properties": {
          "eventLogSubTypeID": {
            "type": "integer",
            "description": "Event log subtype ID",
            "format": "int32"
          },
          "eventLogSubTypeName": {
            "type": "string",
            "description": "Event log subtype name",
            "nullable": true
          },
          "eventlogSubTypeDisplayName": {
            "type": "string",
            "description": "Event log subtype display name",
            "nullable": true
          }
        },
        "description": "Model that describes an event log category"
      },
      "PackageDropAssetTypeDTO": {
        "type": "object",
        "properties": {
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageDropAssetPropertyDTO"
            },
            "description": "List of asset properties",
            "nullable": true
          },
          "eventLogSubTypes": {
            "type": "object",
            "properties": {
              "All": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventLogSubTypeResponseDTO"
                }
              },
              "Recommendations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventLogSubTypeResponseDTO"
                }
              },
              "Alarms": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventLogSubTypeResponseDTO"
                }
              },
              "Alerts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventLogSubTypeResponseDTO"
                }
              },
              "Comment": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventLogSubTypeResponseDTO"
                }
              },
              "Maintenance": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventLogSubTypeResponseDTO"
                }
              }
            },
            "description": "List of event log sub types",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "assetTypeName": {
            "type": "string",
            "description": "Asset Type Name",
            "nullable": true
          },
          "assetTypeDescription": {
            "type": "string",
            "description": "Display name of the asset type",
            "nullable": true
          }
        },
        "description": "Model that describes an asset type"
      },
      "IndustryTypeDTO": {
        "type": "object",
        "properties": {
          "industryTypeID": {
            "type": "integer",
            "description": "Industry Type ID",
            "format": "int32"
          },
          "industryTypeName": {
            "type": "string",
            "description": "Industry Type Name",
            "nullable": true
          }
        },
        "description": "Model that describes an industry type"
      },
      "BearingManufacturerDetailsDTO": {
        "type": "object",
        "properties": {
          "bsf": {
            "type": "number",
            "description": "BSF",
            "format": "double"
          },
          "bpfi": {
            "type": "number",
            "description": "BPFI",
            "format": "double"
          },
          "bpfo": {
            "type": "number",
            "description": "BPFO",
            "format": "double"
          },
          "bearingCount": {
            "type": "number",
            "description": "Bearing Count",
            "format": "double"
          },
          "bearingSealed": {
            "type": "boolean",
            "description": "Bearing Sealed"
          },
          "bearingID": {
            "type": "integer",
            "description": "Bearing ID",
            "format": "int32"
          },
          "manufacturerID": {
            "type": "integer",
            "description": "Manufacturer ID",
            "format": "int32"
          },
          "manufacturerName": {
            "type": "string",
            "description": "Manufacturer Name",
            "nullable": true
          }
        },
        "description": "Model that describes a manufacturer"
      },
      "BearingDTO": {
        "type": "object",
        "properties": {
          "bearingID": {
            "type": "integer",
            "description": "Bearing ID",
            "format": "int32"
          },
          "bearingNo": {
            "type": "string",
            "description": "Bearing Number",
            "nullable": true
          },
          "manufacturers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BearingManufacturerDetailsDTO"
            },
            "description": "List of manufacturers",
            "nullable": true
          }
        },
        "description": "Model that describes bearing details"
      },
      "ShaftHeightDTO": {
        "type": "object",
        "properties": {
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          },
          "assetPropertyValue": {
            "type": "object",
            "description": "Asset Property Value",
            "nullable": true
          },
          "shaftHeightValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Shaft Height Values",
            "nullable": true
          }
        },
        "description": "Model that describes a shaft height"
      },
      "ManufacturerDTO": {
        "type": "object",
        "properties": {
          "manufacturerID": {
            "type": "integer",
            "description": "Manufacturer ID",
            "format": "int32"
          },
          "manufacturerName": {
            "type": "string",
            "description": "Manufacturer Name",
            "nullable": true
          }
        },
        "description": "Base Model that describes a manufacturer"
      },
      "AppConfigKey": {
        "enum": [
          "Undefined",
          "LogReportEmailRecipients",
          "LogReportEmailTemplate",
          "NewUserInvitationEmailTemplate",
          "ExistingUserInvitationEmailTemplate",
          "LogReportEmailSubject",
          "InvitationEmailSubject",
          "EventAcknowledgementComment",
          "UserRemoveEmailSubject",
          "UserRemoveEmailTemplate",
          "ApiKeyGeneratedSubject",
          "ApiKeyGeneratedTemplate",
          "SupportManagedUserSubject",
          "SupportManagedUserTemplate",
          "RequestingManagedUserSubject",
          "RequestingManagedUserTemplate",
          "SalesPersonEmailSubject",
          "SalesPersonEmailTemplate",
          "ExportedSensorsSubject",
          "ExportedSensorsTemplate",
          "MarketPlaceContractDetailsSubject",
          "MarketPlaceContractDetailsTemplate",
          "MarketPlaceCloudInterfaceAddOnSubject",
          "MarketPlaceCloudInterfaceAddOnTemplate",
          "MarketPlaceEmailRecipients",
          "MarketplaceCancelContractSubject",
          "MarketplaceCancelContractTemplate",
          "EnableHealtEventRequest",
          "EnableQueryProductInformation",
          "EnableQRCodeSerialNumber",
          "EnableQuerySparePartInformation",
          "EnableSSHHAdvancedMeasurement",
          "AmbientSensorProvisionedEmailSubject",
          "AmbientSensorProvisionedEmailTemplate",
          "ServISAssetLocalizationUpdateSubject",
          "ServISAssetLocalizationUpdateTemplate",
          "ServISAssetLocalizationUpdateRecipients",
          "ReportEmailRecipients",
          "ReportRequestedSubject",
          "ReportRequestedTemplate",
          "ReportRevokedSubject",
          "ReportRevokedTemplate",
          "ReportRejectedSubject",
          "ReportRejectedTemplate",
          "ReportCompletedSubject",
          "ReportCompletedTemplate",
          "ReportRequestedSubmittedSubject",
          "ReportRequestedSubmittedTemplate",
          "ExportedMeasurementsEmailSubject",
          "ExportedMeasurementsEmailTemplate",
          "UserAddedFromMarketplaceTemplate",
          "UserAddedFromMarketplaceSubject",
          "RSSIMailSubject",
          "RSSIMailTemplate",
          "SensorErrorSubject",
          "SensorErrorTemplate",
          "MarketplaceRetryFailedSubject",
          "MarketplaceRetryFailedTemplate"
        ],
        "type": "string",
        "description": "Types of application configuration keys"
      },
      "ConfigurationValueDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AppConfigKey"
          },
          "value": {
            "type": "object",
            "description": "Value of the configuration",
            "nullable": true
          }
        },
        "description": "Model that describes a configuration type and value"
      },
      "MeasurementTypeDTO": {
        "type": "object",
        "properties": {
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "measurementTypeCode": {
            "type": "string",
            "description": "Measurement Type Code",
            "nullable": true
          },
          "measurementTypeName": {
            "type": "string",
            "description": "Measurement Type Name",
            "nullable": true
          },
          "measurementTypePrecision": {
            "type": "integer",
            "description": "Measurement Type Precision",
            "format": "int32"
          },
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "measurementTypeSequenceNo": {
            "type": "integer",
            "description": "Measurement Type Sequence Number",
            "format": "int32"
          },
          "isCumulative": {
            "type": "boolean",
            "description": "Flag that shows if a measurement type is cumulative or trend"
          }
        },
        "description": "Model that describes a measurement type"
      },
      "PackageDropConfigurationProfileDTO": {
        "type": "object",
        "properties": {
          "configurationProfileID": {
            "type": "integer",
            "description": "Id of the configuration profile",
            "format": "int32",
            "nullable": true
          },
          "configurationProfileName": {
            "type": "string",
            "description": "Name of the configuration profile",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "description": "Configuration profile visibility flag"
          },
          "minimumFirmwareVersion": {
            "type": "string",
            "description": "Configuration profile min firmware version",
            "nullable": true
          },
          "measurementTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeasurementTypeDTO"
            },
            "description": "List of measurement types",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "assetTypeName": {
            "type": "string",
            "description": "Asset Type Name",
            "nullable": true
          },
          "assetTypeDescription": {
            "type": "string",
            "description": "Display name of the asset type",
            "nullable": true
          }
        },
        "description": "Model that describes a configuration profile"
      },
      "PackageDropSensorTypeDTO": {
        "type": "object",
        "properties": {
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageDropConfigurationProfileDTO"
            },
            "description": "Configuration profiles",
            "nullable": true
          },
          "typeProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorPropertyValueResponseDTO"
            },
            "description": "Sensor type properties",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "sensorTypeName": {
            "type": "string",
            "description": "Sensor type name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Sensor type display name",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor type"
      },
      "CountryDTO": {
        "type": "object",
        "properties": {
          "countryID": {
            "type": "integer",
            "description": "Country ID",
            "format": "int32"
          },
          "countryName": {
            "type": "string",
            "description": "Country Name",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true
          }
        },
        "description": "Plant country information model"
      },
      "PackageDropFirmwareResponseDTO": {
        "type": "object",
        "properties": {
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          }
        },
        "description": "Package Drop firmware response"
      },
      "PackageDropFirmwareUpgradeResponseDTO": {
        "type": "object",
        "properties": {
          "compatibilityList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageDropFirmwareResponseDTO"
            },
            "description": "Firmware upgrade compatibility list",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          }
        },
        "description": "Package Drop firmware replace response"
      },
      "PackageDropDTO": {
        "type": "object",
        "properties": {
          "assetTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageDropAssetTypeDTO"
            },
            "description": "List of asset types",
            "nullable": true
          },
          "industryTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndustryTypeDTO"
            },
            "description": "List of industry types",
            "nullable": true
          },
          "bearings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BearingDTO"
            },
            "description": "List of manufacturers",
            "nullable": true
          },
          "shaftHeights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShaftHeightDTO"
            },
            "description": "List of shaft heights",
            "nullable": true
          },
          "manufacturers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManufacturerDTO"
            },
            "description": "List of manufacturers",
            "nullable": true
          },
          "configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationValueDTO"
            },
            "description": "List of configurations",
            "nullable": true
          },
          "sensorTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageDropSensorTypeDTO"
            },
            "description": "Sensor types",
            "nullable": true
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryDTO"
            },
            "description": "Countries",
            "nullable": true
          },
          "firmwareUpgradeCompatibility": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageDropFirmwareUpgradeResponseDTO"
            },
            "description": "Firmware upgrade compatibility list",
            "nullable": true
          }
        },
        "description": "Model that describes a package drop"
      },
      "AssetTypePropertyAvailableValuesDTO": {
        "type": "object",
        "properties": {
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          },
          "assetPropertyName": {
            "type": "string",
            "description": "Asset Property Display Name",
            "nullable": true
          },
          "availableValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyIdentifierValueDTO"
            },
            "description": "Available values",
            "nullable": true
          }
        },
        "description": "Model that describes all available values for an asset property"
      },
      "AssetTypePropertySuggestedValuesDTO": {
        "type": "object",
        "properties": {
          "assetPropertyType": {
            "type": "string",
            "description": "Asset Property Type",
            "nullable": true
          },
          "assePropertyName": {
            "type": "string",
            "description": "Asset Property Name",
            "nullable": true
          },
          "suggestedValues": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Suggested values",
            "nullable": true
          }
        },
        "description": "Model that describes all suggested values for an asset property"
      },
      "AuditLogModule": {
        "enum": [
          "FirmwareManagement",
          "MarketplaceManagement",
          "WorkerService",
          "SubscriptionManagement",
          "ActivationCodeManagement"
        ],
        "type": "string",
        "description": "Available audit log modules"
      },
      "AuditLogResponseDTO": {
        "type": "object",
        "properties": {
          "logID": {
            "type": "integer",
            "description": "Log ID",
            "format": "int32"
          },
          "author": {
            "type": "string",
            "description": "Author",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time"
          },
          "module": {
            "$ref": "#/components/schemas/AuditLogModule"
          },
          "operation": {
            "type": "string",
            "description": "Operation",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "description": "Old value",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "description": "New value",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Details",
            "nullable": true
          },
          "deviceUniqueID": {
            "type": "string",
            "description": "Device unique id",
            "nullable": true
          }
        },
        "description": "Model that describes an audit log file"
      },
      "DeviceLoginRequestDTO": {
        "required": [
          "deviceUID",
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "User Name",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Password",
            "nullable": true
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          }
        },
        "description": "Model for device login"
      },
      "UserRegistrationType": {
        "enum": [
          "Undefined",
          "SelfRegisteredUser",
          "ManagedExternalUser",
          "Internal",
          "External"
        ],
        "type": "string",
        "description": "User ADFS Refistration Type"
      },
      "AdminRoles": {
        "enum": [
          "Undefined",
          "SuperViewer",
          "SuperAdmin"
        ],
        "type": "string",
        "description": "User roles"
      },
      "LoginResponseDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time",
            "nullable": true
          },
          "authToken": {
            "type": "string",
            "description": "Authentication Token",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh Token",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "Expiration for authentication token",
            "format": "date-time",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID of the user",
            "format": "int32",
            "nullable": true
          },
          "isPrivateOrganization": {
            "type": "boolean",
            "description": "Flag indicating if organization is private"
          },
          "organizationName": {
            "type": "string",
            "description": "Organization name of the user",
            "nullable": true
          },
          "isSuperAdmin": {
            "type": "boolean",
            "description": "Flag that is set to true if the user is a super admin"
          },
          "gisNumber": {
            "type": "string",
            "description": "ABB GIS Number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "User Name",
            "nullable": true
          },
          "userRegistrationType": {
            "$ref": "#/components/schemas/UserRegistrationType"
          },
          "isManagedUserRequestAllowed": {
            "type": "boolean",
            "description": "Flag that is set to true if the user is allowed to add a managed user request"
          },
          "isTrustedOrganization": {
            "type": "boolean",
            "description": "Flag indicating if organization is trusted"
          },
          "isOrganizationAdmin": {
            "type": "boolean",
            "description": "Flag that is set to true if the user is an organization admin"
          },
          "adminRoleType": {
            "$ref": "#/components/schemas/AdminRoles"
          }
        },
        "description": "Model that describes a login response"
      },
      "TokenRefreshDTO": {
        "required": [
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh Token",
            "nullable": true
          }
        },
        "description": "Model for token refreshing"
      },
      "OIDLoginRequestDTO": {
        "required": [
          "deviceUID",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Authentication token",
            "nullable": true
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          }
        },
        "description": "Model for device login"
      },
      "DeviceRegisterRequestDTO": {
        "required": [
          "appVersion",
          "deviceUID",
          "manufacturer",
          "model",
          "osType",
          "osVersion"
        ],
        "type": "object",
        "properties": {
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer",
            "nullable": true
          },
          "model": {
            "type": "string",
            "description": "Model",
            "nullable": true
          },
          "osType": {
            "type": "string",
            "description": "Operating System Type",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "description": "Operating System Version",
            "nullable": true
          },
          "appVersion": {
            "type": "string",
            "description": "Application Version",
            "nullable": true
          },
          "deviceCategoryID": {
            "type": "integer",
            "description": "Category ID of the device",
            "format": "int32",
            "nullable": true
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "description": {
            "type": "string",
            "description": "Device description",
            "nullable": true
          },
          "deviceName": {
            "type": "string",
            "description": "Device name",
            "nullable": true
          },
          "deviceCategoryName": {
            "type": "string",
            "description": "Category name of the device",
            "nullable": true
          }
        },
        "description": "Model for registering a device"
      },
      "UTCTimeStampResponseDTO": {
        "type": "object",
        "properties": {
          "utcTime": {
            "type": "string",
            "description": "UTC standard time",
            "format": "date-time"
          }
        },
        "description": "Model that describes a UTC time response"
      },
      "ApiKeyLoginRequestDTO": {
        "required": [
          "apiKey"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "API Key",
            "nullable": true
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          }
        },
        "description": "Model for API Key login"
      },
      "GrantType": {
        "enum": [
          "password",
          "authorization_code",
          "refresh_token",
          "client_credentials",
          "id_token",
          "access_token",
          "api_key"
        ],
        "type": "string",
        "description": "Available grant types"
      },
      "OAuth2LoginRequestDTO": {
        "required": [
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "$ref": "#/components/schemas/GrantType"
          },
          "username": {
            "type": "string",
            "description": "User name",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Password",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "description": "Client id",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "Scope",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Code",
            "nullable": true
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token",
            "nullable": true
          },
          "id_token": {
            "type": "string",
            "description": "ID token",
            "nullable": true
          },
          "access_token": {
            "type": "string",
            "description": "Access token",
            "nullable": true
          },
          "api_key": {
            "type": "string",
            "description": "API key",
            "nullable": true
          },
          "redirect_uri": {
            "type": "string",
            "description": "Redirect URL, in case of OAuth2 authorization code flow",
            "nullable": true
          },
          "device_uid": {
            "type": "string",
            "description": "Custom field for SmartSensor device unique id",
            "nullable": true
          }
        },
        "description": "Model for OAuth2 login request"
      },
      "OAuth2LoginResponseDTO": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access token",
            "nullable": true
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token",
            "nullable": true
          },
          "token_type": {
            "type": "string",
            "description": "Token type",
            "nullable": true
          },
          "expires_in": {
            "type": "integer",
            "description": "Expires in",
            "format": "int32"
          },
          "api_url": {
            "type": "string",
            "description": "API url",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "Scope",
            "nullable": true
          },
          "id_token": {
            "type": "string",
            "description": "ID token, in case of OAuth2 authorication code flow",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp when response is generated",
            "format": "date-time",
            "nullable": true
          },
          "user_claims": {
            "type": "object",
            "properties": {
              "FirstName": {
                "type": "object"
              },
              "Country": {
                "type": "object"
              },
              "GISNumber": {
                "type": "object"
              },
              "IDToken": {
                "type": "object"
              },
              "IsManagedUserRequestAllowed": {
                "type": "object"
              },
              "IsOrganizationAdmin": {
                "type": "object"
              },
              "IsPrivateOrganization": {
                "type": "object"
              },
              "IsSuperAdmin": {
                "type": "object"
              },
              "IsTrustedOrganization": {
                "type": "object"
              },
              "LastName": {
                "type": "object"
              },
              "OrganizationID": {
                "type": "object"
              },
              "OrganizationName": {
                "type": "object"
              },
              "UserID": {
                "type": "object"
              },
              "UserName": {
                "type": "object"
              },
              "UserRegistrationType": {
                "type": "object"
              },
              "AdminRoleType": {
                "type": "object"
              }
            },
            "description": "SmartSensor user claims",
            "nullable": true
          }
        },
        "description": "Model for OAuth2 login response"
      },
      "ChartGroup": {
        "enum": [
          "Dashboard",
          "Statistics",
          "FAQ"
        ],
        "type": "string",
        "description": "Groups of charts"
      },
      "ChartResultParameterDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Parameter name",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Parameter value",
            "nullable": true
          }
        },
        "description": "Model that describes parameter value"
      },
      "ChartResultValueDTO": {
        "type": "object",
        "properties": {
          "rowIndex": {
            "type": "integer",
            "description": "Row index",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "description": "Value of the cell",
            "nullable": true
          }
        },
        "description": "Model that defines the value of a cell in a table"
      },
      "ChartResultResponseDTO": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string",
            "description": "Column Name",
            "nullable": true
          },
          "resultValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartResultValueDTO"
            },
            "description": "Values in the cells",
            "nullable": true
          }
        },
        "description": "Model that describes a general response for a generic request"
      },
      "ChartResultListResponseDTO": {
        "type": "object",
        "properties": {
          "resultList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartResultResponseDTO"
            },
            "description": "Table with resulted values",
            "nullable": true
          },
          "totalRowCount": {
            "type": "integer",
            "description": "Total number of results in the database",
            "format": "int32",
            "nullable": true
          }
        },
        "description": "Model that describes a general response for a generic request with the number of results"
      },
      "ChartResponseDTO": {
        "type": "object",
        "properties": {
          "chartID": {
            "type": "integer",
            "description": "Chart ID",
            "format": "int32"
          },
          "chartName": {
            "type": "string",
            "description": "Chart Name",
            "nullable": true
          },
          "chartGroup": {
            "$ref": "#/components/schemas/ChartGroup"
          },
          "chartUniqueIdentifier": {
            "type": "integer",
            "description": "Chart unique identifier",
            "format": "int32"
          }
        },
        "description": "Model that describes a chart object"
      },
      "PeriodType": {
        "enum": [
          "Hourly",
          "Daily",
          "Weekly",
          "Monthly",
          "Yearly"
        ],
        "type": "string",
        "description": "Available period types"
      },
      "ChartType": {
        "enum": [
          "Undefined",
          "TripleStackChart",
          "ColumnChart",
          "PieChart",
          "LineChart",
          "DoubleLineChart",
          "StackChart"
        ],
        "type": "string",
        "description": "Types of charts"
      },
      "ChartSeriesDTO": {
        "type": "object",
        "properties": {
          "chartSeriesID": {
            "type": "integer",
            "description": "Chart Series ID",
            "format": "int32"
          },
          "chartSeriesName": {
            "type": "string",
            "description": "Chart Series Name",
            "nullable": true
          }
        },
        "description": "Model that describes a chart series object"
      },
      "ChartValueDTO": {
        "type": "object",
        "properties": {
          "chartSeriesID": {
            "type": "integer",
            "description": "Chart Series ID",
            "format": "int32"
          },
          "value": {
            "type": "number",
            "description": "Value",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Model that describes a chart value object"
      },
      "ChartValuesDTO": {
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartValueDTO"
            },
            "description": "",
            "nullable": true
          }
        },
        "description": "Model that describes a chart value object"
      },
      "ChartDataResponseDTO": {
        "type": "object",
        "properties": {
          "chartDescription": {
            "type": "string",
            "description": "Descriptive text of the chart",
            "nullable": true
          },
          "chartType": {
            "$ref": "#/components/schemas/ChartType"
          },
          "chartUnitGroupID": {
            "type": "integer",
            "description": "Measure Unit Group ID",
            "format": "int32",
            "nullable": true
          },
          "chartUnitGroupName": {
            "type": "string",
            "description": "Measure Unit Group Name",
            "nullable": true
          },
          "chartSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartSeriesDTO"
            },
            "description": "Chart Series",
            "nullable": true
          },
          "chartValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartValuesDTO"
            },
            "description": "Chart Series Values",
            "nullable": true
          },
          "chartID": {
            "type": "integer",
            "description": "Chart ID",
            "format": "int32"
          },
          "chartName": {
            "type": "string",
            "description": "Chart Name",
            "nullable": true
          },
          "chartGroup": {
            "$ref": "#/components/schemas/ChartGroup"
          },
          "chartUniqueIdentifier": {
            "type": "integer",
            "description": "Chart unique identifier",
            "format": "int32"
          }
        },
        "description": "Model that describes a chart data object"
      },
      "ConditionIndexResponseDTO": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionIndexDTO"
            },
            "description": "List of available Condition Indexes",
            "nullable": true
          }
        },
        "description": "Model that describes a list of condition indexes for an asset"
      },
      "ConditionIndexStatusValueDTO": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp when values were computed",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "description": "Decimal value of condition index",
            "format": "double"
          },
          "status": {
            "$ref": "#/components/schemas/ConditionIndexStatus"
          },
          "statusCode": {
            "type": "string",
            "description": "Health status unique identifier for message",
            "nullable": true
          },
          "statusCodeMessage": {
            "type": "string",
            "description": "Health status message that explains why we have current status",
            "nullable": true
          }
        },
        "description": "Model describing a condition index status value"
      },
      "ConditionIndexValueDTO": {
        "type": "object",
        "properties": {
          "conditionIndexStatusValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionIndexStatusValueDTO"
            },
            "description": "List of status values",
            "nullable": true
          },
          "conditionIndexKey": {
            "type": "string",
            "description": "Condition index key",
            "nullable": true
          },
          "conditionIndexName": {
            "type": "string",
            "description": "Condition index name",
            "nullable": true
          }
        },
        "description": "Model that describes a condition index value"
      },
      "ConditionIndexValueResponseDTO": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionIndexValueDTO"
            },
            "description": "Status History",
            "nullable": true
          }
        },
        "description": "Model that describes condition index values for an asset"
      },
      "UserDeviceResponseDTO": {
        "required": [
          "appVersion",
          "deviceUID",
          "manufacturer",
          "model",
          "osType",
          "osVersion"
        ],
        "type": "object",
        "properties": {
          "lastOnlineStatus": {
            "type": "boolean",
            "description": "Last online status",
            "nullable": true
          },
          "lastOnlineTime": {
            "type": "string",
            "description": "Date and time when last online status was required",
            "format": "date-time",
            "nullable": true
          },
          "lastDeviceStatus": {
            "$ref": "#/components/schemas/DeviceStatus"
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "description": "Manufacturer",
            "nullable": true
          },
          "model": {
            "type": "string",
            "description": "Model",
            "nullable": true
          },
          "osType": {
            "type": "string",
            "description": "Operating System Type",
            "nullable": true
          },
          "osVersion": {
            "type": "string",
            "description": "Operating System Version",
            "nullable": true
          },
          "appVersion": {
            "type": "string",
            "description": "Application Version",
            "nullable": true
          },
          "deviceCategoryID": {
            "type": "integer",
            "description": "Category ID of the device",
            "format": "int32",
            "nullable": true
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "description": {
            "type": "string",
            "description": "Device description",
            "nullable": true
          },
          "deviceName": {
            "type": "string",
            "description": "Device name",
            "nullable": true
          },
          "deviceCategoryName": {
            "type": "string",
            "description": "Category name of the device",
            "nullable": true
          }
        },
        "description": "Model that describes a user device"
      },
      "DevicePropertyDTO": {
        "type": "object",
        "properties": {
          "devicePropertyValue": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "devicePropertyRequestedValue": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "devicePropertyKeyID": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "devicePropertyKeyName": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "description": ""
      },
      "DeviceConfigurationResponseDTO": {
        "type": "object",
        "properties": {
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "deviceCategoryID": {
            "type": "integer",
            "description": "Category of the device",
            "format": "int32",
            "nullable": true
          },
          "deviceCategoryName": {
            "type": "string",
            "description": "Device Category Name",
            "nullable": true
          },
          "apiKey": {
            "type": "string",
            "description": "API Key",
            "nullable": true
          },
          "lastUpdateTimestamp": {
            "type": "string",
            "description": "Last Update Timestamp",
            "format": "date-time"
          },
          "deviceProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicePropertyDTO"
            },
            "description": "Device property list",
            "nullable": true
          }
        },
        "description": "Model that describes a device configuration"
      },
      "DeviceConfigurationRequestDTO": {
        "required": [
          "deviceCategoryID",
          "deviceTypeID"
        ],
        "type": "object",
        "properties": {
          "deviceTypeID": {
            "type": "integer",
            "description": "Type of the device",
            "format": "int32"
          },
          "deviceCategoryID": {
            "type": "integer",
            "description": "Category of the device",
            "format": "int32"
          },
          "apiKey": {
            "type": "string",
            "description": "API Key",
            "nullable": true
          },
          "lastUpdateTimestamp": {
            "type": "string",
            "description": "Last Update Timestamp",
            "format": "date-time"
          },
          "deviceProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevicePropertyDTO"
            },
            "description": "Device property list",
            "nullable": true
          }
        },
        "description": "Model that describes a device configuration request"
      },
      "DeviceCategoryDTO": {
        "type": "object",
        "properties": {
          "deviceCategoryID": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "deviceCategoryName": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "description": ""
      },
      "DeviceTypeDTO": {
        "type": "object",
        "properties": {
          "deviceTypeID": {
            "type": "integer",
            "description": "Device type ID",
            "format": "int32"
          },
          "deviceTypeName": {
            "$ref": "#/components/schemas/DeviceType"
          }
        },
        "description": "Model for device types"
      },
      "DevicePropertyExtendedDTO": {
        "type": "object",
        "properties": {
          "isValidationRequired": {
            "type": "boolean",
            "description": ""
          },
          "isEditable": {
            "type": "boolean",
            "description": ""
          },
          "validationExpression": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "validationDescription": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "devicePropertyKeyDefaultValue": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "dataTypeID": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "dataTypeName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "devicePropertyKeyID": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "devicePropertyKeyName": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "description": ""
      },
      "OSType": {
        "enum": [
          "Android",
          "IOS"
        ],
        "type": "string",
        "description": "Enumeration for device operating systems"
      },
      "ApplicationUpdateResponseDTO": {
        "type": "object",
        "properties": {
          "hasUpdate": {
            "type": "boolean",
            "description": "Flag which shows if the application has update to a newer version"
          },
          "applicationURL": {
            "type": "string",
            "description": "Url for the location of the app",
            "nullable": true
          }
        },
        "description": "Model that describes an application update"
      },
      "DeviceSoftwareResponseDTO": {
        "required": [
          "deviceCategoryID",
          "softwareVersion"
        ],
        "type": "object",
        "properties": {
          "softwareID": {
            "type": "integer",
            "description": "ID",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "nullable": true
          },
          "softwareStateID": {
            "type": "integer",
            "description": "State ID",
            "format": "int32"
          },
          "lastStateUpdatedOn": {
            "type": "string",
            "description": "State last updated on",
            "format": "date-time",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Created on",
            "format": "date-time"
          },
          "createdByUserID": {
            "type": "integer",
            "description": "Created by id",
            "format": "int32"
          },
          "createdByUserName": {
            "type": "string",
            "description": "Created by",
            "nullable": true
          },
          "lastStateUpdatedByUserID": {
            "type": "integer",
            "description": "Last state updated by id",
            "format": "int32",
            "nullable": true
          },
          "lastStateUpdatedByUserName": {
            "type": "string",
            "description": "Last state updated by",
            "nullable": true
          },
          "numberOfGateways": {
            "type": "integer",
            "description": "Number of gateways with this sofwtare version",
            "format": "int32"
          },
          "checksum": {
            "type": "string",
            "description": "Content MD5 blob property",
            "nullable": true
          },
          "softwareVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "Device software version",
            "nullable": true
          },
          "softwareDetails": {
            "type": "string",
            "description": "Details",
            "nullable": true
          },
          "deviceCategoryID": {
            "type": "integer",
            "description": "Device category",
            "format": "int32"
          }
        },
        "description": "Model for device software"
      },
      "DeviceSoftwareAddRequestDTO": {
        "required": [
          "deviceCategoryID",
          "fileName",
          "softwareContent",
          "softwareVersion"
        ],
        "type": "object",
        "properties": {
          "softwareContent": {
            "type": "string",
            "description": "Device software content as base64 string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "description": "Device software file name",
            "nullable": true
          },
          "softwareVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "Device software version",
            "nullable": true
          },
          "softwareDetails": {
            "type": "string",
            "description": "Details",
            "nullable": true
          },
          "deviceCategoryID": {
            "type": "integer",
            "description": "Device category",
            "format": "int32"
          }
        },
        "description": "Model to add a device software"
      },
      "DeviceSoftwareFileResponseDTO": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Device software file name",
            "nullable": true
          },
          "fileContent": {
            "type": "string",
            "description": "Device software content as base64 string",
            "nullable": true
          }
        },
        "description": "Model that describes a device software file"
      },
      "EventLogType": {
        "enum": [
          "All",
          "Recommendations",
          "Alarms",
          "Alerts",
          "Comment",
          "Maintenance"
        ],
        "type": "string",
        "description": "Enumeration for event log types"
      },
      "EventClosingReason": {
        "enum": [
          "Dismiss",
          "FalseAlarm",
          "Corrected",
          "Auto"
        ],
        "type": "string",
        "description": ""
      },
      "EventLogCommentResponseDTO": {
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Comment timestamp",
            "format": "date-time",
            "nullable": true
          },
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "User name",
            "nullable": true
          },
          "comment": {
            "maxLength": 500,
            "type": "string",
            "description": "Comment",
            "nullable": true
          }
        },
        "description": "Model that describes an event log comment"
      },
      "EventLogResponseDTO": {
        "type": "object",
        "properties": {
          "eventTypeName": {
            "type": "string",
            "description": "Event Type Name",
            "nullable": true
          },
          "eventDescription": {
            "type": "string",
            "description": "Event Description",
            "nullable": true
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "eventLogID": {
            "type": "integer",
            "description": "Event Log ID - this parameter is left for backward compatibility",
            "format": "int64"
          },
          "eventLogCreatedOn": {
            "type": "string",
            "description": "Event log creation date",
            "format": "date-time",
            "nullable": true
          },
          "eventLogCreatedByUserID": {
            "type": "integer",
            "description": "User id that created the event log",
            "format": "int32"
          },
          "eventLogCreatedByUserName": {
            "type": "string",
            "description": "User name that created the event log",
            "nullable": true
          },
          "eventLogIDList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of event Log ID",
            "nullable": true
          },
          "measurementTypeName": {
            "type": "string",
            "description": "Measurement Type Name",
            "nullable": true
          },
          "measurementTypeCode": {
            "type": "string",
            "description": "Measurement Type Code",
            "nullable": true
          },
          "measurementCreatedOn": {
            "type": "string",
            "description": "Measurement Created On Date",
            "format": "date-time",
            "nullable": true
          },
          "measurementValue": {
            "type": "number",
            "description": "Measurement Value",
            "format": "double",
            "nullable": true
          },
          "isClosed": {
            "type": "boolean",
            "description": "Event log state",
            "nullable": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventLogCommentResponseDTO"
            },
            "description": "List of comments",
            "nullable": true
          },
          "countOfEventLogs": {
            "type": "integer",
            "description": "Count of events",
            "format": "int32"
          },
          "eventLogSubTypeID": {
            "type": "integer",
            "description": "Event log subtype ID",
            "format": "int32",
            "nullable": true
          },
          "eventLogSubTypeName": {
            "type": "string",
            "description": "Event log subtype name",
            "nullable": true
          },
          "eventlogSubTypeDisplayName": {
            "type": "string",
            "description": "Event log subtype display name",
            "nullable": true
          },
          "closingReason": {
            "$ref": "#/components/schemas/EventClosingReason"
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "eventTypeID": {
            "$ref": "#/components/schemas/EventLogType"
          },
          "eventLogDescription": {
            "type": "string",
            "description": "Event log description",
            "nullable": true
          }
        },
        "description": "Model that describes an event log"
      },
      "EventLogAddRequestDTO": {
        "type": "object",
        "properties": {
          "eventLogSubTypeID": {
            "type": "integer",
            "description": "Event log subtype ID",
            "format": "int32"
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "eventTypeID": {
            "$ref": "#/components/schemas/EventLogType"
          },
          "eventLogDescription": {
            "type": "string",
            "description": "Event log description",
            "nullable": true
          }
        },
        "description": "Model for adding an event log"
      },
      "EventLogUpdateRequestDTO": {
        "type": "object",
        "properties": {
          "closingReason": {
            "$ref": "#/components/schemas/EventClosingReason"
          },
          "comment": {
            "maxLength": 500,
            "type": "string",
            "description": "Comment",
            "nullable": true
          }
        },
        "description": "Model for event log acknowledgement/closing"
      },
      "EventLogListUpdateRequestDTO": {
        "type": "object",
        "properties": {
          "eventLogIDList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of event log ids",
            "nullable": true
          },
          "closingReason": {
            "$ref": "#/components/schemas/EventClosingReason"
          },
          "comment": {
            "maxLength": 500,
            "type": "string",
            "description": "Comment",
            "nullable": true
          }
        },
        "description": "Model for event log acknowledgement with a list of the events id"
      },
      "EventLogCommentRequestDTO": {
        "required": [
          "eventLogID"
        ],
        "type": "object",
        "properties": {
          "eventLogID": {
            "type": "integer",
            "description": "Event Log ID",
            "format": "int64"
          },
          "comment": {
            "maxLength": 500,
            "type": "string",
            "description": "Comment",
            "nullable": true
          }
        },
        "description": "Model to add an event log comment"
      },
      "FirmwareState": {
        "enum": [
          "Undefined",
          "Created",
          "Available",
          "Online",
          "PhasedOut",
          "Deleted"
        ],
        "type": "string",
        "description": "Enumeration for firmware states"
      },
      "FirmwareResponseDTO": {
        "type": "object",
        "properties": {
          "sensorType": {
            "$ref": "#/components/schemas/SensorTypeDTO"
          },
          "firmwareID": {
            "type": "integer",
            "description": "Firmware ID",
            "format": "int32"
          },
          "nrOfSensors": {
            "type": "integer",
            "description": "Number Of Sensors",
            "format": "int32"
          },
          "firmwareCreatedOn": {
            "type": "string",
            "description": "Created On",
            "format": "date-time",
            "nullable": true
          },
          "firmwareCreatedByUserID": {
            "type": "integer",
            "description": "Created By User ID",
            "format": "int32",
            "nullable": true
          },
          "firmwareCreatedByUserName": {
            "type": "string",
            "description": "Created By User Name",
            "nullable": true
          },
          "firmwareUpdatedByUserID": {
            "type": "integer",
            "description": "Updated By User ID",
            "format": "int32",
            "nullable": true
          },
          "firmwareUpdatedByUserName": {
            "type": "string",
            "description": "Updated By User Name",
            "nullable": true
          },
          "firmwareState": {
            "$ref": "#/components/schemas/FirmwareState"
          },
          "firmwareStateDate": {
            "type": "string",
            "description": "Firmware State Updated On",
            "format": "date-time",
            "nullable": true
          },
          "deployDate": {
            "type": "string",
            "description": "Deployment Date",
            "format": "date-time",
            "nullable": true
          },
          "flashLoaderVersion": {
            "type": "string",
            "description": "Flash Loader Version",
            "nullable": true
          },
          "minimumFirmwareID": {
            "type": "integer",
            "description": "Minimum required firmware ID",
            "format": "int32",
            "nullable": true
          },
          "minimumFirmwareVersion": {
            "type": "string",
            "description": "Minimum required firmware Version",
            "nullable": true
          },
          "compatibility": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareResponseDTO"
            },
            "description": "Firmware upgrade compatibility list",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "firmwareChangeLog": {
            "type": "string",
            "description": "Firmware Change Log",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware"
      },
      "FirmwarePropertyType": {
        "enum": [
          "ClearTrendData",
          "ClearCumulativeData",
          "ClearTagConfig",
          "ClearNameplateData",
          "ClearFlash",
          "EnablePasskeyRecovery"
        ],
        "type": "string",
        "description": "Available firmware properties"
      },
      "FirmwarePropertyRequestDTO": {
        "required": [
          "propertyType",
          "propertyValue"
        ],
        "type": "object",
        "properties": {
          "propertyValue": {
            "type": "object",
            "description": "Property value",
            "nullable": true
          },
          "propertyType": {
            "$ref": "#/components/schemas/FirmwarePropertyType"
          }
        },
        "description": "Model to set a firmware property"
      },
      "FirmwareAddRequestDTO": {
        "required": [
          "firmwareContent",
          "firmwareVersion",
          "sensorTypeID"
        ],
        "type": "object",
        "properties": {
          "firmwareVersion": {
            "maxLength": 20,
            "type": "string",
            "description": "Firmware version",
            "nullable": true
          },
          "firmwareProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwarePropertyRequestDTO"
            },
            "description": "List of firmware properties",
            "nullable": true
          },
          "flashloaderVersion": {
            "type": "string",
            "description": "Flashloader version",
            "nullable": true
          },
          "flashloaderContent": {
            "type": "string",
            "description": "Flashloader content as base64 string",
            "nullable": true
          },
          "minimumFirmwareID": {
            "type": "integer",
            "description": "Minimum required firmware",
            "format": "int32",
            "nullable": true
          },
          "firmwareContent": {
            "type": "string",
            "description": "Firmware content as base64 string",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type",
            "format": "int32"
          },
          "firmwareChangeLog": {
            "type": "string",
            "description": "Firmware Change Log",
            "nullable": true
          }
        },
        "description": "Extended model to add a firmware with properties"
      },
      "FirmwarePropertyValueResponseDTO": {
        "required": [
          "propertyType",
          "propertyValue"
        ],
        "type": "object",
        "properties": {
          "propertyValue": {
            "type": "object",
            "description": "Property value",
            "nullable": true
          },
          "propertyType": {
            "$ref": "#/components/schemas/FirmwarePropertyType"
          }
        },
        "description": "Model that describes a firmware property with values"
      },
      "FirmwareExtendedResponseDTO": {
        "type": "object",
        "properties": {
          "firmwareProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwarePropertyValueResponseDTO"
            },
            "description": "Firmware properties",
            "nullable": true
          },
          "sensorType": {
            "$ref": "#/components/schemas/SensorTypeDTO"
          },
          "firmwareID": {
            "type": "integer",
            "description": "Firmware ID",
            "format": "int32"
          },
          "nrOfSensors": {
            "type": "integer",
            "description": "Number Of Sensors",
            "format": "int32"
          },
          "firmwareCreatedOn": {
            "type": "string",
            "description": "Created On",
            "format": "date-time",
            "nullable": true
          },
          "firmwareCreatedByUserID": {
            "type": "integer",
            "description": "Created By User ID",
            "format": "int32",
            "nullable": true
          },
          "firmwareCreatedByUserName": {
            "type": "string",
            "description": "Created By User Name",
            "nullable": true
          },
          "firmwareUpdatedByUserID": {
            "type": "integer",
            "description": "Updated By User ID",
            "format": "int32",
            "nullable": true
          },
          "firmwareUpdatedByUserName": {
            "type": "string",
            "description": "Updated By User Name",
            "nullable": true
          },
          "firmwareState": {
            "$ref": "#/components/schemas/FirmwareState"
          },
          "firmwareStateDate": {
            "type": "string",
            "description": "Firmware State Updated On",
            "format": "date-time",
            "nullable": true
          },
          "deployDate": {
            "type": "string",
            "description": "Deployment Date",
            "format": "date-time",
            "nullable": true
          },
          "flashLoaderVersion": {
            "type": "string",
            "description": "Flash Loader Version",
            "nullable": true
          },
          "minimumFirmwareID": {
            "type": "integer",
            "description": "Minimum required firmware ID",
            "format": "int32",
            "nullable": true
          },
          "minimumFirmwareVersion": {
            "type": "string",
            "description": "Minimum required firmware Version",
            "nullable": true
          },
          "compatibility": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareResponseDTO"
            },
            "description": "Firmware upgrade compatibility list",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "firmwareChangeLog": {
            "type": "string",
            "description": "Firmware Change Log",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware"
      },
      "FirmwareEditRequestDTO": {
        "type": "object",
        "properties": {
          "firmwareChangeLog": {
            "type": "string",
            "description": "Firmware Change Log",
            "nullable": true
          }
        },
        "description": "Model to edit a firmware"
      },
      "FirmwareMeasurementTypeResponseDTO": {
        "type": "object",
        "properties": {
          "measurementTypeCode": {
            "type": "string",
            "description": "Measurement Type Code",
            "nullable": true
          },
          "measurementTypeName": {
            "type": "string",
            "description": "Measurement Type Name",
            "nullable": true
          },
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "measurementTypeDataType": {
            "type": "string",
            "description": "Measurement Type Data Type",
            "nullable": true
          },
          "measurementTypePrecision": {
            "type": "integer",
            "description": "Measurement Type Precision",
            "format": "int32"
          },
          "isCumulative": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is cumulative"
          },
          "measurementTypeSequenceNo": {
            "type": "integer",
            "description": "Measurement Type Sequence Number",
            "format": "int32"
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationProfileDTO"
            },
            "description": "Measurement Type Configuration Profiles",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset type ID",
            "format": "int32"
          },
          "assetTypeName": {
            "type": "string",
            "description": "Asset type Name",
            "nullable": true
          },
          "assetTypeDescription": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "isEditable": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is editable"
          },
          "isHealthParameter": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is a health parameter"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is enabled"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is visible"
          },
          "isCalibrationEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is offsetable"
          },
          "enableDataValidation": {
            "type": "boolean",
            "description": "Value that indicates if data validation is enabled"
          }
        },
        "description": "Model that describes a measurement type"
      },
      "FirmwareSensorFeatureResponseDTO": {
        "type": "object",
        "properties": {
          "featureTypeName": {
            "type": "string",
            "description": "Feature Type Name",
            "nullable": true
          },
          "featureDataType": {
            "type": "string",
            "description": "Feature Data Type",
            "nullable": true
          },
          "featureKeySequenceNo": {
            "type": "integer",
            "description": "Feature Key Sequence Number",
            "format": "int32"
          },
          "featureTypeKey": {
            "type": "string",
            "description": "Feature Type Key",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is enabled"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Value that indicates if the feature type is visible"
          }
        },
        "description": "Model that describes a Sensor Type feature"
      },
      "FirmwareDetailsResponseDTO": {
        "type": "object",
        "properties": {
          "firmwareID": {
            "type": "integer",
            "description": "Firmware ID",
            "format": "int32"
          },
          "firmwarePath": {
            "type": "string",
            "description": "Firmware Path",
            "nullable": true
          },
          "measurementTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareMeasurementTypeResponseDTO"
            },
            "description": "List of measurement types",
            "nullable": true
          },
          "sensorFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareSensorFeatureResponseDTO"
            },
            "description": "List of sensor features",
            "nullable": true
          },
          "firmwareProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwarePropertyValueResponseDTO"
            },
            "description": "Firmware properties",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware with details"
      },
      "FirmwareDetailsExtendedResponseDTO": {
        "type": "object",
        "properties": {
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "sensorType": {
            "$ref": "#/components/schemas/SensorTypeDTO"
          },
          "firmwareID": {
            "type": "integer",
            "description": "Firmware ID",
            "format": "int32"
          },
          "firmwarePath": {
            "type": "string",
            "description": "Firmware Path",
            "nullable": true
          },
          "measurementTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareMeasurementTypeResponseDTO"
            },
            "description": "List of measurement types",
            "nullable": true
          },
          "sensorFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareSensorFeatureResponseDTO"
            },
            "description": "List of sensor features",
            "nullable": true
          },
          "firmwareProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwarePropertyValueResponseDTO"
            },
            "description": "Firmware properties",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware with details"
      },
      "FirmwareMeasurementTypeRequestDTO": {
        "type": "object",
        "properties": {
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "isEditable": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is editable"
          },
          "isHealthParameter": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is a health parameter"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is enabled"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is visible"
          },
          "isCalibrationEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is offsetable"
          },
          "enableDataValidation": {
            "type": "boolean",
            "description": "Value that indicates if data validation is enabled"
          }
        },
        "description": "Model to update a measurement type of a firmware"
      },
      "FirmwareSensorFeatureRequestDTO": {
        "type": "object",
        "properties": {
          "featureTypeKey": {
            "type": "string",
            "description": "Feature Type Key",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Value that indicates if the measurement type is enabled"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Value that indicates if the feature type is visible"
          }
        },
        "description": "Model to update a sensor feature of a firmware"
      },
      "FirmwareFileResponseDTO": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Firmware File Name",
            "nullable": true
          },
          "firmwareContent": {
            "type": "string",
            "description": "Firmware content as base64 string",
            "nullable": true
          },
          "flashloaderVersion": {
            "type": "string",
            "description": "Flashloader version",
            "nullable": true
          },
          "flashloaderContent": {
            "type": "string",
            "description": "Flashloader content as base64 string",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware"
      },
      "FirmwareDeploymentFilterType": {
        "enum": [
          "HardwareRevision",
          "Organization",
          "AssetProperty",
          "StartSerialNumber",
          "EndSerialNumber"
        ],
        "type": "string",
        "description": "Enumeration for firmware deployment filter types"
      },
      "FirmwareDeploymentFilterValueRequestDTO": {
        "required": [
          "filterValue"
        ],
        "type": "object",
        "properties": {
          "filterValue": {
            "type": "object",
            "description": "Filter Value",
            "nullable": true
          }
        },
        "description": "Model to set a firmware deployment filter value"
      },
      "FirmwareDeploymentFilterRequestDTO": {
        "required": [
          "filterType",
          "filterValues"
        ],
        "type": "object",
        "properties": {
          "filterType": {
            "$ref": "#/components/schemas/FirmwareDeploymentFilterType"
          },
          "filterValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareDeploymentFilterValueRequestDTO"
            },
            "description": "Filter Value",
            "nullable": true
          }
        },
        "description": "Model to set a firmware deployment filter"
      },
      "FirmwareDeploymentRequestDTO": {
        "required": [
          "filterData"
        ],
        "type": "object",
        "properties": {
          "deployDate": {
            "type": "string",
            "description": "Deployment date",
            "format": "date-time",
            "nullable": true
          },
          "filterData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareDeploymentFilterRequestDTO"
            },
            "description": "List of deployment filters",
            "nullable": true
          }
        },
        "description": "Model to set a firmware deployment"
      },
      "FirmwareDeploymentFilterValueResponseDTO": {
        "required": [
          "filterValue"
        ],
        "type": "object",
        "properties": {
          "filterValueName": {
            "type": "string",
            "description": "Filter Name",
            "nullable": true
          },
          "filterTypeName": {
            "type": "string",
            "description": "Filter Type Name",
            "nullable": true
          },
          "filterValue": {
            "type": "object",
            "description": "Filter Value",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware deployment filter value"
      },
      "FirmwareDeploymentFilterResponseDTO": {
        "type": "object",
        "properties": {
          "filterType": {
            "$ref": "#/components/schemas/FirmwareDeploymentFilterType"
          },
          "deployDate": {
            "type": "string",
            "description": "Deployment date",
            "format": "date-time",
            "nullable": true
          },
          "filterValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwareDeploymentFilterValueResponseDTO"
            },
            "description": "Filter Value",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware deployment filter"
      },
      "FirmwarePropertyResponseDTO": {
        "required": [
          "propertyType"
        ],
        "type": "object",
        "properties": {
          "propertyType": {
            "$ref": "#/components/schemas/FirmwarePropertyType"
          }
        },
        "description": "Model that describes a firmware property type"
      },
      "FirmwareValidateRequestDTO": {
        "required": [
          "firmwareContent",
          "sensorTypeID"
        ],
        "type": "object",
        "properties": {
          "firmwareContent": {
            "type": "string",
            "description": "Firmware content as base64 string",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type",
            "format": "int32"
          },
          "firmwareChangeLog": {
            "type": "string",
            "description": "Firmware Change Log",
            "nullable": true
          }
        },
        "description": "Model to validate a firmware"
      },
      "FirmwareValidateResponseDTO": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Value that indicates if the firmware is valid"
          },
          "firmwareProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FirmwarePropertyValueResponseDTO"
            },
            "description": "Firmware properties",
            "nullable": true
          },
          "isValidationRequired": {
            "type": "boolean",
            "description": "Value indicates if validation for the sensor type is required"
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "firmwareChangeLog": {
            "type": "string",
            "description": "Firmware Change Log",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware validation"
      },
      "FileContentDTO": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of the file",
            "nullable": true
          }
        },
        "description": "Model for generic file in base64 format"
      },
      "MeasurementValueResponseDTO": {
        "type": "object",
        "properties": {
          "measurementValue": {
            "type": "object",
            "description": "Measurement Value",
            "nullable": true
          },
          "measurementCreated": {
            "type": "string",
            "description": "Measurement Date Created",
            "format": "date-time",
            "nullable": true
          },
          "measurementCalibration": {
            "type": "number",
            "description": "Measurement Calibration Offset",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Model that describes measurement values"
      },
      "MeasurementsResponseDTO": {
        "type": "object",
        "properties": {
          "measurements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeasurementValueResponseDTO"
            },
            "description": "List of measurements",
            "nullable": true
          },
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "measurementTypeCode": {
            "type": "string",
            "description": "Measurement Type Code",
            "nullable": true
          },
          "measurementTypeName": {
            "type": "string",
            "description": "Measurement Type Name",
            "nullable": true
          },
          "measurementTypePrecision": {
            "type": "integer",
            "description": "Measurement Type Precision",
            "format": "int32"
          },
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "measurementTypeSequenceNo": {
            "type": "integer",
            "description": "Measurement Type Sequence Number",
            "format": "int32"
          },
          "isCumulative": {
            "type": "boolean",
            "description": "Flag that shows if a measurement type is cumulative or trend"
          }
        },
        "description": "Model that describes measurements"
      },
      "MeasurementListRequestDTO": {
        "required": [
          "assetIDList",
          "measurementTypes"
        ],
        "type": "object",
        "properties": {
          "assetIDList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of asset ids",
            "nullable": true
          },
          "measurementTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of measurement types",
            "nullable": true
          }
        },
        "description": "Model that describest the measurement types list request for multiple assets"
      },
      "MeasurementsListResponseDTO": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "measurementTypeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeasurementsResponseDTO"
            },
            "description": "",
            "nullable": true
          }
        },
        "description": "Model that describest a measurement reponse for an asset"
      },
      "MeasurementRequestDTO": {
        "required": [
          "measurementTypeCode",
          "value"
        ],
        "type": "object",
        "properties": {
          "measurementTypeCode": {
            "type": "string",
            "description": "Type of measurement",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value for measurement",
            "nullable": true
          }
        },
        "description": "Model for loading measurements"
      },
      "TrendMeasurementRequestDTO": {
        "required": [
          "measurementCreatedOn",
          "uniqueID"
        ],
        "type": "object",
        "properties": {
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "measurementCreatedOn": {
            "type": "string",
            "description": "Timestamp when measurement was created",
            "format": "date-time"
          },
          "trendValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeasurementRequestDTO"
            },
            "description": "Measurement data values",
            "nullable": true
          }
        },
        "description": "Model for loading trend measurements"
      },
      "MeasurementAddRequestDTO": {
        "required": [
          "assetID",
          "measurementTakenOn",
          "uniqueID"
        ],
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "measurementTakenOn": {
            "type": "string",
            "description": "Timestamp when measurement was collected",
            "format": "date-time"
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "applicationVersion": {
            "type": "string",
            "description": "Application Version",
            "nullable": true
          },
          "trendData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendMeasurementRequestDTO"
            },
            "description": "Trend measurement data values",
            "nullable": true
          }
        },
        "description": "Model for loading measurements"
      },
      "MeasurementSensorAddRequestDTO": {
        "required": [
          "measurementTakenOn",
          "sensorTypeID",
          "uniqueID"
        ],
        "type": "object",
        "properties": {
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "deviceUID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "measurementTakenOn": {
            "type": "string",
            "description": "Timestamp when measurement was collected",
            "format": "date-time"
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Firmware Version",
            "nullable": true
          },
          "applicationVersion": {
            "type": "string",
            "description": "Application Version",
            "nullable": true
          },
          "trendData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendMeasurementRequestDTO"
            },
            "description": "Trend measurement data values",
            "nullable": true
          }
        },
        "description": "Model for loading measurements for a sensor"
      },
      "MeasurementHealthIntervalResponseDTO": {
        "required": [
          "measurementTypeID",
          "valueFrom",
          "valueTo"
        ],
        "type": "object",
        "properties": {
          "measurementTypeName": {
            "type": "string",
            "description": "Measurement Type Name",
            "nullable": true
          },
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "measurementTypeCode": {
            "type": "string",
            "description": "Measurement Type Code",
            "nullable": true
          },
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatusDTO"
          },
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "valueFrom": {
            "type": "number",
            "description": "Health interval from value",
            "format": "double"
          },
          "valueTo": {
            "type": "number",
            "description": "Health interval to value",
            "format": "double"
          },
          "enableNotification": {
            "type": "boolean",
            "description": "Flag indicating if notifications get generated for this health interval"
          }
        },
        "description": "Model that describes a measure unit health interval"
      },
      "MeasurementHealthIntervalRequestDTO": {
        "required": [
          "measurementTypeID",
          "valueFrom",
          "valueTo"
        ],
        "type": "object",
        "properties": {
          "healthStatus": {
            "$ref": "#/components/schemas/AssetHealthStatus"
          },
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "valueFrom": {
            "type": "number",
            "description": "Health interval from value",
            "format": "double"
          },
          "valueTo": {
            "type": "number",
            "description": "Health interval to value",
            "format": "double"
          },
          "enableNotification": {
            "type": "boolean",
            "description": "Flag indicating if notifications get generated for this health interval"
          }
        },
        "description": "Model for saving measure unit health intervals"
      },
      "MeasurementCalibrationRequestDTO": {
        "required": [
          "measurementTypeID",
          "value"
        ],
        "type": "object",
        "properties": {
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "value": {
            "type": "number",
            "description": "Offset value",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Model for saving measure calibration value"
      },
      "MeasurementCalibrationResponseDTO": {
        "required": [
          "measurementTypeID",
          "value"
        ],
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "measurementTypeName": {
            "type": "string",
            "description": "Measurement Type Name",
            "nullable": true
          },
          "measurementTypeID": {
            "type": "integer",
            "description": "Measurement Type ID",
            "format": "int32"
          },
          "value": {
            "type": "number",
            "description": "Offset value",
            "format": "double",
            "nullable": true
          }
        },
        "description": "Model that describes a measure unit calibration value"
      },
      "MeasurementUnitStandard": {
        "enum": [
          "Metric",
          "Imperial"
        ],
        "type": "string",
        "description": "Standards for measure units"
      },
      "MeasurementUnitResponseDTO": {
        "type": "object",
        "properties": {
          "measurementUnitSymbol": {
            "type": "string",
            "description": "Measurement Unit Symbol",
            "nullable": true
          },
          "measurementUnitStandard": {
            "$ref": "#/components/schemas/MeasurementUnitStandard"
          },
          "measurementUnitConversionRate": {
            "type": "number",
            "description": "Measurement Unit Conversion Rate",
            "format": "double"
          }
        },
        "description": "Model that describes a measure unit"
      },
      "MeasurementUnitGroupResponseDTO": {
        "type": "object",
        "properties": {
          "measurementUnitGroup": {
            "$ref": "#/components/schemas/MeasurementUnitGroupDTO"
          },
          "measurementUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeasurementUnitResponseDTO"
            },
            "description": "List of measurement units",
            "nullable": true
          }
        },
        "description": "Model that describes a measurement unit group"
      },
      "NotificationType": {
        "enum": [
          "Undefined",
          "UserAddedToGroup",
          "LoadMeasurementAlert",
          "LoadMeasurementAlarm",
          "SubscriptionExpirationReminder",
          "MeasurementTakenReminder",
          "UserJoinedOrganizationInfo",
          "UserOrganizationChange",
          "RawDataCollected",
          "AssetNameplateDataEdited",
          "AssetDecommissioned",
          "AssetCommissioned",
          "LowBatteryCapacity",
          "LoadMeasurementNotification",
          "TransferAssetToGroup",
          "AssetNormalOperationStatus",
          "SensorReplaced",
          "SubscriptionExpired",
          "LoadMeasurementComplete",
          "ConditionIndexChange",
          "GatewayMissedMeasurement",
          "LoadMeasurementOnDemandSuccessful",
          "LoadMeasurementOnDemandUnsuccessful"
        ],
        "type": "string",
        "description": "Notification types"
      },
      "NotificationChannel": {
        "enum": [
          "Email",
          "Push",
          "Webhook"
        ],
        "type": "string",
        "description": "Notification Channels"
      },
      "NotificationResponseDTO": {
        "type": "object",
        "properties": {
          "isDefaultEnabled": {
            "type": "boolean",
            "description": "Is default enabled flag"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Is visible flag"
          },
          "isAssetSpecific": {
            "type": "boolean",
            "description": "Is Asset specific flag"
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "notificationTypeName": {
            "type": "string",
            "description": "Notification Name",
            "nullable": true
          },
          "notificationDescription": {
            "type": "string",
            "description": "Notification Description",
            "nullable": true
          },
          "notificationChannel": {
            "$ref": "#/components/schemas/NotificationChannel"
          }
        },
        "description": "Model that describes notification response"
      },
      "NotificationChannelPropertiesDTO": {
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "Notification Channel Property Key",
            "nullable": true
          },
          "propertyValue": {
            "type": "string",
            "description": "Notification Channel Property Value",
            "nullable": true
          }
        },
        "description": "Model that describes channel properties"
      },
      "UserNotificationResponseDTO": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/NotificationChannel"
          },
          "channelProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationChannelPropertiesDTO"
            },
            "description": "WebHook Properties",
            "nullable": true
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "notificationTypeName": {
            "type": "string",
            "description": "Notification Name",
            "nullable": true
          },
          "notificationDescription": {
            "type": "string",
            "description": "Notification Description",
            "nullable": true
          },
          "notificationChannel": {
            "$ref": "#/components/schemas/NotificationChannel"
          }
        },
        "description": "Model that describes user notifications"
      },
      "KeyValueRequestDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "String key",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "String value",
            "nullable": true
          }
        },
        "description": "Generic key/value pair model"
      },
      "UserAssetNotificationRequestDTO": {
        "type": "object",
        "properties": {
          "assetIDList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of asset ID's",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValueRequestDTO"
            },
            "description": "List of properties",
            "nullable": true
          },
          "template": {
            "type": "string",
            "description": "User template for the notification",
            "nullable": true
          }
        },
        "description": "Model that describes a user and asset notification"
      },
      "UserNotificationRequestDTO": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValueRequestDTO"
            },
            "description": "List of properties",
            "nullable": true
          },
          "template": {
            "type": "string",
            "description": "User template for the notification",
            "nullable": true
          }
        },
        "description": "Model that describes a user notification"
      },
      "BroadcastMessageRequestDTO": {
        "type": "object",
        "properties": {
          "pdfContent": {
            "type": "string",
            "description": "Notification content in base64 format",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the broadcast notification validity",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the broadcast notification validity",
            "format": "date-time"
          }
        },
        "description": "Model that describes the broadcast notification request"
      },
      "BroadcastMessageResponseDTO": {
        "type": "object",
        "properties": {
          "broadcastMessageID": {
            "type": "integer",
            "description": "Id of the broadcast notification",
            "format": "int32",
            "nullable": true
          },
          "createdBy": {
            "type": "integer",
            "description": "Created by",
            "format": "int32"
          },
          "createdOn": {
            "type": "string",
            "description": "Created on",
            "format": "date-time"
          },
          "messagePath": {
            "type": "string",
            "description": "Blob storage path where the broadcast notification is saved",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the broadcast notification validity",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the broadcast notification validity",
            "format": "date-time"
          }
        },
        "description": "Model that describes the broadcast message add response"
      },
      "OrganizationResponseDTO": {
        "type": "object",
        "properties": {
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "createdOn": {
            "type": "string",
            "description": "Date of the organization was created on",
            "format": "date-time",
            "nullable": true
          },
          "createdByUserID": {
            "type": "integer",
            "description": "Id of the user who created the organization",
            "format": "int32",
            "nullable": true
          },
          "createdByUserName": {
            "type": "string",
            "description": "Name of the user who created the organization",
            "nullable": true
          },
          "promotionalTitle": {
            "type": "string",
            "description": "Trusted Organization promotional information - Title",
            "nullable": true
          },
          "promotionalContent": {
            "type": "string",
            "description": "Trusted Organization promotional information - Content",
            "nullable": true
          },
          "promotionalLogoPath": {
            "type": "string",
            "description": "Trusted Organization promotional information - Logo (blob storage path)",
            "nullable": true
          },
          "organizationName": {
            "maxLength": 50,
            "type": "string",
            "description": "Organization Name",
            "nullable": true
          },
          "isPrivateOrganization": {
            "type": "boolean",
            "description": "Flag to set if it is a private organization"
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Flag to set if it is a sandbox organization",
            "nullable": true
          },
          "sandboxStartDate": {
            "type": "string",
            "description": "Organization reset date",
            "format": "date-time",
            "nullable": true
          },
          "isManagedUserRequestAllowed": {
            "type": "boolean",
            "description": "Flag that is set to true if the user is allowed to add a managed user request"
          },
          "isTrustedOrganization": {
            "type": "boolean",
            "description": "Flag to set if it is a trusted organization",
            "nullable": true
          },
          "isTrustedVisible": {
            "type": "boolean",
            "description": "Flag indicating if a trusted organization is publicly visible",
            "nullable": true
          }
        },
        "description": "Model that describes an organization response"
      },
      "OrganizationAddRequestDTO": {
        "required": [
          "organizationName",
          "userEmail"
        ],
        "type": "object",
        "properties": {
          "userEmail": {
            "type": "string",
            "description": "Email of the Organization Admin",
            "format": "email",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "description": "Organization Name",
            "nullable": true
          }
        },
        "description": "Model that describes an organization item"
      },
      "ValueRequestDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "String value",
            "nullable": true
          }
        },
        "description": "Data transfer object for a string value"
      },
      "OrganizationWithCountResponseDTO": {
        "type": "object",
        "properties": {
          "assetCount": {
            "type": "integer",
            "description": "Count of asset in the organization",
            "format": "int32"
          },
          "userCount": {
            "type": "integer",
            "description": "Count of users in the organization",
            "format": "int32"
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "createdOn": {
            "type": "string",
            "description": "Date of the organization was created on",
            "format": "date-time",
            "nullable": true
          },
          "createdByUserID": {
            "type": "integer",
            "description": "Id of the user who created the organization",
            "format": "int32",
            "nullable": true
          },
          "createdByUserName": {
            "type": "string",
            "description": "Name of the user who created the organization",
            "nullable": true
          },
          "promotionalTitle": {
            "type": "string",
            "description": "Trusted Organization promotional information - Title",
            "nullable": true
          },
          "promotionalContent": {
            "type": "string",
            "description": "Trusted Organization promotional information - Content",
            "nullable": true
          },
          "promotionalLogoPath": {
            "type": "string",
            "description": "Trusted Organization promotional information - Logo (blob storage path)",
            "nullable": true
          },
          "organizationName": {
            "maxLength": 50,
            "type": "string",
            "description": "Organization Name",
            "nullable": true
          },
          "isPrivateOrganization": {
            "type": "boolean",
            "description": "Flag to set if it is a private organization"
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Flag to set if it is a sandbox organization",
            "nullable": true
          },
          "sandboxStartDate": {
            "type": "string",
            "description": "Organization reset date",
            "format": "date-time",
            "nullable": true
          },
          "isManagedUserRequestAllowed": {
            "type": "boolean",
            "description": "Flag that is set to true if the user is allowed to add a managed user request"
          },
          "isTrustedOrganization": {
            "type": "boolean",
            "description": "Flag to set if it is a trusted organization",
            "nullable": true
          },
          "isTrustedVisible": {
            "type": "boolean",
            "description": "Flag indicating if a trusted organization is publicly visible",
            "nullable": true
          }
        },
        "description": "Model that describes an organization response"
      },
      "SubscriptionWithSensorTypeDTO": {
        "type": "object",
        "properties": {
          "sensorType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorTypeDTO"
            },
            "description": "Sensor type",
            "nullable": true
          },
          "subscriptionLevel": {
            "$ref": "#/components/schemas/SubscriptionLevelDTO"
          }
        },
        "description": "Subscription model with sensor type association"
      },
      "OrganizationSubscriptionResponseDTO": {
        "type": "object",
        "properties": {
          "configurationItem": {
            "type": "string",
            "description": "Configuration Item",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionWithSensorTypeDTO"
          },
          "subscriptionDuration": {
            "type": "integer",
            "description": "Subscription Duration",
            "format": "int32"
          },
          "isAutomaticRenewal": {
            "type": "boolean",
            "description": "Is automatically renewable"
          },
          "productKey": {
            "type": "string",
            "description": "Describes subscription client key for authentication",
            "nullable": true
          },
          "externalOrderID": {
            "type": "string",
            "description": "Describes subscription marketplace account ID",
            "nullable": true
          },
          "marketplaceOriginatorUrl": {
            "type": "string",
            "description": "Marketplace URL origin",
            "nullable": true
          }
        },
        "description": "Model that describes an organization subscription item"
      },
      "OrganizationSubscriptionRequestDTO": {
        "type": "object",
        "properties": {
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionWithSensorTypeDTO"
          },
          "subscriptionDuration": {
            "type": "integer",
            "description": "Subscription Duration",
            "format": "int32"
          },
          "isAutomaticRenewal": {
            "type": "boolean",
            "description": "Is automatically renewable"
          },
          "productKey": {
            "type": "string",
            "description": "Describes subscription client key for authentication",
            "nullable": true
          },
          "externalOrderID": {
            "type": "string",
            "description": "Describes subscription marketplace account ID",
            "nullable": true
          },
          "marketplaceOriginatorUrl": {
            "type": "string",
            "description": "Marketplace URL origin",
            "nullable": true
          }
        },
        "description": "Model that describes an organization subscription add item"
      },
      "OrganizationRequestDTO": {
        "type": "object",
        "properties": {
          "trustedGroupResponsibleUserID": {
            "type": "integer",
            "description": "User ID of the responsible person to be added to the Trusted user group",
            "format": "int32"
          },
          "organizationName": {
            "maxLength": 50,
            "type": "string",
            "description": "Organization Name",
            "nullable": true
          },
          "isPrivateOrganization": {
            "type": "boolean",
            "description": "Flag to set if it is a private organization"
          },
          "isSandbox": {
            "type": "boolean",
            "description": "Flag to set if it is a sandbox organization",
            "nullable": true
          },
          "sandboxStartDate": {
            "type": "string",
            "description": "Organization reset date",
            "format": "date-time",
            "nullable": true
          },
          "isManagedUserRequestAllowed": {
            "type": "boolean",
            "description": "Flag that is set to true if the user is allowed to add a managed user request"
          },
          "isTrustedOrganization": {
            "type": "boolean",
            "description": "Flag to set if it is a trusted organization",
            "nullable": true
          },
          "isTrustedVisible": {
            "type": "boolean",
            "description": "Flag indicating if a trusted organization is publicly visible",
            "nullable": true
          }
        },
        "description": "Model that describes an organization request"
      },
      "OrganizationPromotionalInfoUpdateRequestDTO": {
        "type": "object",
        "properties": {
          "promotionalTitle": {
            "type": "string",
            "description": "Promotional Title",
            "nullable": true
          },
          "promotionalContent": {
            "type": "string",
            "description": "Promotional Content",
            "nullable": true
          },
          "logoImageContent": {
            "type": "string",
            "description": "Promotional Logo image content (base64 encoded)",
            "nullable": true
          },
          "logoImageContentType": {
            "type": "string",
            "description": "Promotional Logo image content type (MIME type - must be image)",
            "nullable": true
          }
        },
        "description": "Organization promotional info update request DTO"
      },
      "UserGroupResponseDTO": {
        "required": [
          "userGroupName"
        ],
        "type": "object",
        "properties": {
          "userGroupID": {
            "type": "integer",
            "description": "User Group ID",
            "format": "int32"
          },
          "isMainGroup": {
            "type": "boolean",
            "description": "Flag that identifies a user group as administrative"
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "isTrusted": {
            "type": "boolean",
            "description": "Flag that identifies if a UG is trusted",
            "nullable": true
          },
          "allowManagement": {
            "type": "boolean",
            "description": "Flag indicating if the current user can add or remove users to the user group"
          },
          "userGroupName": {
            "maxLength": 100,
            "type": "string",
            "description": "User Group Name",
            "nullable": true
          }
        },
        "description": "Model that describes a user group"
      },
      "UserResponseDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "User Name",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "description": "User Email",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          }
        },
        "description": "Model that describes a user"
      },
      "OrganizationUserGroupWithUsersResponseDTO": {
        "type": "object",
        "properties": {
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "userGroup": {
            "$ref": "#/components/schemas/UserGroupResponseDTO"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponseDTO"
            },
            "description": "Users",
            "nullable": true
          }
        },
        "description": "Model that describes a user group with users"
      },
      "TrustedOrganizationResponseDTO": {
        "type": "object",
        "properties": {
          "trustedOrganizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "trustedOrganizationName": {
            "type": "string",
            "description": "Organization name",
            "nullable": true
          },
          "assetGroupID": {
            "type": "integer",
            "description": "Asset group ID",
            "format": "int32"
          },
          "assetGroupName": {
            "type": "string",
            "description": "Asset group name",
            "nullable": true
          }
        },
        "description": "Model that describes a trusted organization item"
      },
      "MaintenanceType": {
        "enum": [
          "Undefined",
          "FOTA"
        ],
        "type": "string",
        "description": "Organization Maintenance Type"
      },
      "DayOfWeek": {
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "OrganizationMaintenanceRequestDTO": {
        "type": "object",
        "properties": {
          "maintenanceType": {
            "$ref": "#/components/schemas/MaintenanceType"
          },
          "startDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "startTime": {
            "type": "string",
            "description": "Maintenance Start Time",
            "format": "date-span"
          },
          "endDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "endTime": {
            "type": "string",
            "description": "Maintenance End Time",
            "format": "date-span"
          }
        },
        "description": "Model that describes an organization maintenance item"
      },
      "OrganizationMaintenanceResponseDTO": {
        "type": "object",
        "properties": {
          "maintenanceType": {
            "$ref": "#/components/schemas/MaintenanceType"
          },
          "startDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "startTime": {
            "type": "string",
            "description": "Maintenance Start Time",
            "format": "date-span"
          },
          "endDayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "endTime": {
            "type": "string",
            "description": "Maintenance End Time",
            "format": "date-span"
          }
        },
        "description": "Model that describes an organization maintenance item"
      },
      "PlantAddRequestDTO": {
        "required": [
          "organizationID",
          "plantName",
          "uniqueID"
        ],
        "type": "object",
        "properties": {
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "plantName": {
            "maxLength": 50,
            "type": "string",
            "description": "Plant Name",
            "nullable": true
          },
          "pinNumber": {
            "type": "string",
            "description": "Pin Number",
            "nullable": true
          },
          "industryTypeID": {
            "type": "integer",
            "description": "Industry Type ID",
            "format": "int32",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Address",
            "nullable": true
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site identifier",
            "nullable": true
          }
        },
        "description": "Model for adding a plant"
      },
      "PlantResponseDTO": {
        "required": [
          "plantName"
        ],
        "type": "object",
        "properties": {
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "industryTypeName": {
            "type": "string",
            "description": "Industry Type Name",
            "nullable": true
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "plantName": {
            "maxLength": 50,
            "type": "string",
            "description": "Plant Name",
            "nullable": true
          },
          "pinNumber": {
            "type": "string",
            "description": "Pin Number",
            "nullable": true
          },
          "industryTypeID": {
            "type": "integer",
            "description": "Industry Type ID",
            "format": "int32",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Address",
            "nullable": true
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site identifier",
            "nullable": true
          }
        },
        "description": "Model that describes a plant"
      },
      "PlantEditRequestDTO": {
        "required": [
          "plantName"
        ],
        "type": "object",
        "properties": {
          "plantName": {
            "maxLength": 50,
            "type": "string",
            "description": "Plant Name",
            "nullable": true
          },
          "pinNumber": {
            "type": "string",
            "description": "Pin Number",
            "nullable": true
          },
          "industryTypeID": {
            "type": "integer",
            "description": "Industry Type ID",
            "format": "int32",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Address",
            "nullable": true
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site identifier",
            "nullable": true
          }
        },
        "description": "Model for editing a plant"
      },
      "PlantWithHealthResponseDTO": {
        "required": [
          "plantName"
        ],
        "type": "object",
        "properties": {
          "healthStatus": {
            "$ref": "#/components/schemas/HealthStatusDTO"
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "industryTypeName": {
            "type": "string",
            "description": "Industry Type Name",
            "nullable": true
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "plantName": {
            "maxLength": 50,
            "type": "string",
            "description": "Plant Name",
            "nullable": true
          },
          "pinNumber": {
            "type": "string",
            "description": "Pin Number",
            "nullable": true
          },
          "industryTypeID": {
            "type": "integer",
            "description": "Industry Type ID",
            "format": "int32",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Address",
            "nullable": true
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site identifier",
            "nullable": true
          }
        },
        "description": "Model that describes a plant"
      },
      "PlantWithCountResponseDTO": {
        "required": [
          "plantName"
        ],
        "type": "object",
        "properties": {
          "assetCount": {
            "type": "integer",
            "description": "Asset Count",
            "format": "int32"
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32"
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "industryTypeName": {
            "type": "string",
            "description": "Industry Type Name",
            "nullable": true
          },
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "plantName": {
            "maxLength": 50,
            "type": "string",
            "description": "Plant Name",
            "nullable": true
          },
          "pinNumber": {
            "type": "string",
            "description": "Pin Number",
            "nullable": true
          },
          "industryTypeID": {
            "type": "integer",
            "description": "Industry Type ID",
            "format": "int32",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Address",
            "nullable": true
          },
          "locationLatitude": {
            "type": "string",
            "description": "Location Latitude",
            "nullable": true
          },
          "locationLongitude": {
            "type": "string",
            "description": "Location Longitude",
            "nullable": true
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site identifier",
            "nullable": true
          }
        },
        "description": "Model that describes a plant"
      },
      "ScatterPlotResponseDTO": {
        "type": "object",
        "properties": {
          "scatterPlotID": {
            "type": "integer",
            "description": "Scatter Plot Type ID",
            "format": "int32"
          },
          "scatterPlotName": {
            "type": "string",
            "description": "Scatter Plot Type Name",
            "nullable": true
          },
          "scatterPlotCode": {
            "type": "string",
            "description": "Scatter Plot Type Code",
            "nullable": true
          }
        },
        "description": "Model that describes a scatter plot type item"
      },
      "HistogramResponseDTO": {
        "type": "object",
        "properties": {
          "histogramID": {
            "type": "integer",
            "description": "Histogram Type ID",
            "format": "int32"
          },
          "histogramName": {
            "type": "string",
            "description": "Histogram Type Name",
            "nullable": true
          },
          "histogramCode": {
            "type": "string",
            "description": "Histogram Type Code",
            "nullable": true
          }
        },
        "description": "Model that describes histogram type"
      },
      "HistogramValueDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Value of the histogram bin range",
            "format": "int32"
          },
          "valueFrom": {
            "type": "number",
            "description": "Bin lower value",
            "format": "double"
          },
          "valueTo": {
            "type": "number",
            "description": "Bin upper value",
            "format": "double"
          },
          "orderNo": {
            "type": "integer",
            "description": "Bin sequence number",
            "format": "int32"
          }
        },
        "description": "Model that describes a histogram value"
      },
      "HistogramBinDTO": {
        "type": "object",
        "properties": {
          "valueFrom": {
            "type": "number",
            "description": "Bin lower value",
            "format": "double"
          },
          "valueTo": {
            "type": "number",
            "description": "Bin upper value",
            "format": "double"
          },
          "orderNo": {
            "type": "integer",
            "description": "Bin sequence number",
            "format": "int32"
          }
        },
        "description": "Model that describes a histogram bin range"
      },
      "HistogramConfigurationDTO": {
        "type": "object",
        "properties": {
          "binMeasurementType": {
            "$ref": "#/components/schemas/MeasurementTypeDTO"
          },
          "aggregationMeasurementType": {
            "$ref": "#/components/schemas/MeasurementTypeDTO"
          },
          "bins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistogramBinDTO"
            },
            "description": "List of bin ranges for the histogram",
            "nullable": true
          },
          "histogramID": {
            "type": "integer",
            "description": "Histogram Type ID",
            "format": "int32"
          },
          "histogramName": {
            "type": "string",
            "description": "Histogram Type Name",
            "nullable": true
          },
          "histogramCode": {
            "type": "string",
            "description": "Histogram Type Code",
            "nullable": true
          }
        },
        "description": "Model that describes a histogram configuration"
      },
      "HistogramDataResponseDTO": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistogramValueDTO"
            },
            "description": "List of values to be displayed on the histograms",
            "nullable": true
          },
          "config": {
            "$ref": "#/components/schemas/HistogramConfigurationDTO"
          }
        },
        "description": "Model that describes a histogram data item"
      },
      "PowerTrainSiteDTO": {
        "required": [
          "siteId"
        ],
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "description": "Site ID",
            "format": "int32"
          },
          "plantId": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32"
          },
          "siteIdentifier": {
            "type": "string",
            "description": "Site Identifier",
            "nullable": true
          },
          "siteName": {
            "type": "string",
            "description": "Site Name",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Latitudinal position of site",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Longitudinal position of the site",
            "format": "double",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country of the site",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the site",
            "nullable": true
          }
        },
        "description": ""
      },
      "ComponentTypeDTO": {
        "type": "object",
        "properties": {
          "dataSourceType": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "dataSourceName": {
            "type": "string",
            "description": "Component Type Data Source Name",
            "nullable": true
          },
          "typeID": {
            "type": "integer",
            "description": "Component Type ID",
            "format": "int32"
          },
          "typeName": {
            "type": "string",
            "description": "Component Type Name",
            "nullable": true
          },
          "detailsURL": {
            "type": "string",
            "description": "Component Details URL",
            "nullable": true
          },
          "typeDescription": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "description": ""
      },
      "ComponentDTO": {
        "type": "object",
        "properties": {
          "componentID": {
            "type": "string",
            "description": "PowerTrain Component ID",
            "nullable": true
          },
          "componentName": {
            "type": "string",
            "description": "PowerTrain Component Name",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "PowerTrain Component Serial Number",
            "nullable": true
          },
          "componentType": {
            "$ref": "#/components/schemas/ComponentTypeDTO"
          },
          "isMonitored": {
            "type": "boolean",
            "description": "Is Monitored"
          }
        },
        "description": ""
      },
      "PowerTrainAddRequestDTO": {
        "type": "object",
        "properties": {
          "powerTrainName": {
            "type": "string",
            "description": "PowerTrain Name",
            "nullable": true
          },
          "powerTrainDescription": {
            "type": "string",
            "description": "PowerTrain description",
            "nullable": true
          },
          "site": {
            "$ref": "#/components/schemas/PowerTrainSiteDTO"
          },
          "componentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentDTO"
            },
            "description": "PowerTrain Component List",
            "nullable": true
          }
        },
        "description": "Model for adding PowerTrains"
      },
      "PowerTrainResponseDTO": {
        "type": "object",
        "properties": {
          "powerTrainID": {
            "type": "integer",
            "description": "PowerTrain ID",
            "format": "int32"
          },
          "disabled": {
            "type": "boolean",
            "description": "Shows wether the PowerTrain is disabled or not"
          },
          "powerTrainName": {
            "type": "string",
            "description": "PowerTrain Name",
            "nullable": true
          },
          "powerTrainDescription": {
            "type": "string",
            "description": "PowerTrain description",
            "nullable": true
          },
          "site": {
            "$ref": "#/components/schemas/PowerTrainSiteDTO"
          },
          "componentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentDTO"
            },
            "description": "PowerTrain Component List",
            "nullable": true
          }
        },
        "description": ""
      },
      "PowerTrainEditRequestDTO": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean",
            "description": "Shows wether the PowerTrain is disabled or not"
          },
          "powerTrainName": {
            "type": "string",
            "description": "PowerTrain Name",
            "nullable": true
          },
          "powerTrainDescription": {
            "type": "string",
            "description": "PowerTrain description",
            "nullable": true
          },
          "site": {
            "$ref": "#/components/schemas/PowerTrainSiteDTO"
          },
          "componentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentDTO"
            },
            "description": "PowerTrain Component List",
            "nullable": true
          }
        },
        "description": "Model for editing PowerTrains"
      },
      "StringStringKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "KPITemplateItemDTO": {
        "type": "object",
        "properties": {
          "assetType": {
            "$ref": "#/components/schemas/ComponentTypeDTO"
          },
          "instanceNr": {
            "type": "integer",
            "description": "Occurence number of the asset for the current type",
            "format": "int32"
          },
          "measurementTypeIdentifier": {
            "type": "string",
            "description": "Measurement type selected on the asset",
            "nullable": true
          }
        },
        "description": "Model for template items"
      },
      "KPITemplateResponseDTO": {
        "type": "object",
        "properties": {
          "templateID": {
            "type": "integer",
            "description": "ID of the template",
            "format": "int32"
          },
          "templateName": {
            "type": "string",
            "description": "Name of the template",
            "nullable": true
          },
          "templateItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPITemplateItemDTO"
            },
            "description": "List of template items",
            "nullable": true
          }
        },
        "description": "Model for response DTO"
      },
      "KPITemplateAddDTO": {
        "type": "object",
        "properties": {
          "templateName": {
            "type": "string",
            "description": "Name of the template",
            "nullable": true
          },
          "templateItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KPITemplateItemDTO"
            },
            "description": "List of template items",
            "nullable": true
          }
        },
        "description": "Model for adding KPI templates"
      },
      "ApplicationType": {
        "enum": [
          "CommonSensor",
          "PowerTrain"
        ],
        "type": "string",
        "description": "Enumeration for application types"
      },
      "PowerTrainComponentCheckResponseDTO": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "",
            "format": "int32"
          },
          "isPowertrainComponent": {
            "type": "boolean",
            "description": ""
          }
        },
        "description": ""
      },
      "ReportCategory": {
        "enum": [
          "Undefined",
          "AssetType",
          "Organization"
        ],
        "type": "string",
        "description": ""
      },
      "ReportFileContentDTO": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Name of the report file",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "Content of the file",
            "nullable": true
          }
        },
        "description": ""
      },
      "ReportState": {
        "enum": [
          "Requested",
          "Revoked",
          "Rejected",
          "Completed",
          "Pending",
          "Error"
        ],
        "type": "string",
        "description": "List of report states"
      },
      "ReportResponseDTO": {
        "required": [
          "typeID"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          },
          "typeDisplayName": {
            "type": "string",
            "description": "Report Type Display Name",
            "nullable": true
          },
          "requestDate": {
            "type": "string",
            "description": "Report Request Date",
            "format": "date-time"
          },
          "updateStatusDate": {
            "type": "string",
            "description": "Report Status Update Date",
            "format": "date-time"
          },
          "requestedBy": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32",
            "nullable": true
          },
          "updatedBy": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/ReportState"
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32",
            "nullable": true
          },
          "typeID": {
            "type": "integer",
            "description": "Report Type ID",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "description": "Report Comment",
            "nullable": true
          },
          "reportStartDate": {
            "type": "string",
            "description": "Report Start Date",
            "format": "date-time",
            "nullable": true
          },
          "reportEndDate": {
            "type": "string",
            "description": "Report end Date",
            "format": "date-time",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32",
            "nullable": true
          },
          "unitStandard": {
            "$ref": "#/components/schemas/MeasurementUnitStandard"
          }
        },
        "description": "Model that describes a report"
      },
      "ReportAddRequestDTO": {
        "required": [
          "typeID"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "File content",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "description": "File name",
            "nullable": true
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32",
            "nullable": true
          },
          "typeID": {
            "type": "integer",
            "description": "Report Type ID",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "description": "Report Comment",
            "nullable": true
          },
          "reportStartDate": {
            "type": "string",
            "description": "Report Start Date",
            "format": "date-time",
            "nullable": true
          },
          "reportEndDate": {
            "type": "string",
            "description": "Report end Date",
            "format": "date-time",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32",
            "nullable": true
          },
          "unitStandard": {
            "$ref": "#/components/schemas/MeasurementUnitStandard"
          }
        },
        "description": "Model that describes a report add request"
      },
      "ReportCompleteRequestDTO": {
        "required": [
          "typeID"
        ],
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32",
            "nullable": true
          },
          "typeID": {
            "type": "integer",
            "description": "Report Type ID",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "description": "Report Comment",
            "nullable": true
          },
          "reportStartDate": {
            "type": "string",
            "description": "Report Start Date",
            "format": "date-time",
            "nullable": true
          },
          "reportEndDate": {
            "type": "string",
            "description": "Report end Date",
            "format": "date-time",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32",
            "nullable": true
          },
          "unitStandard": {
            "$ref": "#/components/schemas/MeasurementUnitStandard"
          }
        },
        "description": "Model that describes a report complete request"
      },
      "ReportTypeResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Report Type ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Report type name",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Report type display name",
            "nullable": true
          },
          "reportCategory": {
            "$ref": "#/components/schemas/ReportCategory"
          },
          "itemTypeID": {
            "type": "integer",
            "description": "Item type ID",
            "format": "int32"
          }
        },
        "description": "Model that describes a report type"
      },
      "SensorState": {
        "enum": [
          "Provisioned",
          "Active",
          "Inactive",
          "Decommissioned",
          "Deactivated"
        ],
        "type": "string",
        "description": "Enum for sensor statuses"
      },
      "SensorResponseDTO": {
        "required": [
          "sensorIdentifier"
        ],
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32",
            "nullable": true
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationProfileDTO"
            },
            "description": "Configuration Profiles",
            "nullable": true
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last Activity Date",
            "format": "date-time",
            "nullable": true
          },
          "lastResetDate": {
            "type": "string",
            "description": "Last Reset Date",
            "format": "date-time",
            "nullable": true
          },
          "plantName": {
            "type": "string",
            "description": "Plant Name",
            "nullable": true
          },
          "commisioningDate": {
            "type": "string",
            "description": "Commisioning Date",
            "format": "date-time",
            "nullable": true
          },
          "isCommissioned": {
            "type": "boolean",
            "description": "Flag indicating if the sensor is commissioned or not"
          },
          "firmwareID": {
            "type": "integer",
            "description": "Last Firmware ID",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "Location of the plant",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "sensorType": {
            "$ref": "#/components/schemas/SensorTypeDTO"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorPropertyValueResponseDTO"
            },
            "description": "Sensor properties",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SensorActiveSubscriptionResponseDTO"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "trialPeriodDuration": {
            "type": "integer",
            "description": "Trial period duration",
            "format": "int32",
            "nullable": true
          },
          "lastSensorState": {
            "$ref": "#/components/schemas/SensorState"
          },
          "lastSensorStateCreatedOn": {
            "type": "string",
            "description": "Last sensor state update timestamp",
            "format": "date-time"
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "revision": {
            "type": "string",
            "description": "Hardware Revision",
            "nullable": true
          },
          "manufacturingBatch": {
            "type": "string",
            "description": "Manufacturing Batch",
            "nullable": true
          },
          "baseFirmwareVersion": {
            "type": "string",
            "description": "Base Firmware Version",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Last Firmware Version",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor"
      },
      "SensorListResponseDTO": {
        "type": "object",
        "properties": {
          "sensorList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorResponseDTO"
            },
            "description": "Sensor list",
            "nullable": true
          },
          "numberOfEntries": {
            "type": "integer",
            "description": "Number of filtered entries",
            "format": "int32"
          }
        },
        "description": "Model that describes activation sensor list response model"
      },
      "SensorPropertyValueRequestDTO": {
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "Property Type Key",
            "nullable": true
          },
          "propertyValue": {
            "type": "object",
            "description": "Property Value",
            "nullable": true
          }
        },
        "description": "Model to add a property value for a sensor"
      },
      "SensorAddRequestDTO": {
        "required": [
          "sensorIdentifier",
          "sensorTypeID"
        ],
        "type": "object",
        "properties": {
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor type",
            "format": "int32"
          },
          "sensorProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorPropertyValueRequestDTO"
            },
            "description": "Sensor properties",
            "nullable": true
          },
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueRequestDTO"
            },
            "description": "Asset properties",
            "nullable": true
          },
          "subscriptionLevelName": {
            "type": "string",
            "description": "Subscription type/level Name",
            "nullable": true
          },
          "subcriptionStartDate": {
            "type": "string",
            "description": "Subscription start date",
            "format": "date-time",
            "nullable": true
          },
          "subscriptionDuration": {
            "type": "integer",
            "description": "Subscription duration (int months)",
            "format": "int32"
          },
          "trialPeriodDuration": {
            "type": "integer",
            "description": "Trial subscription duration (int months)",
            "format": "int32",
            "nullable": true
          },
          "configurationProfileIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Configuration profile IDs",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "revision": {
            "type": "string",
            "description": "Hardware Revision",
            "nullable": true
          },
          "manufacturingBatch": {
            "type": "string",
            "description": "Manufacturing Batch",
            "nullable": true
          },
          "baseFirmwareVersion": {
            "type": "string",
            "description": "Base Firmware Version",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Last Firmware Version",
            "nullable": true
          }
        },
        "description": "Model for adding sensors"
      },
      "SensorExtendedResponseDTO": {
        "required": [
          "sensorIdentifier"
        ],
        "type": "object",
        "properties": {
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueResponseDTO"
            },
            "description": "Asset propperties",
            "nullable": true
          },
          "firmwareUpdate": {
            "$ref": "#/components/schemas/FirmwareUpdateResponseDTO"
          },
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32",
            "nullable": true
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationProfileDTO"
            },
            "description": "Configuration Profiles",
            "nullable": true
          },
          "lastActivityDate": {
            "type": "string",
            "description": "Last Activity Date",
            "format": "date-time",
            "nullable": true
          },
          "lastResetDate": {
            "type": "string",
            "description": "Last Reset Date",
            "format": "date-time",
            "nullable": true
          },
          "plantName": {
            "type": "string",
            "description": "Plant Name",
            "nullable": true
          },
          "commisioningDate": {
            "type": "string",
            "description": "Commisioning Date",
            "format": "date-time",
            "nullable": true
          },
          "isCommissioned": {
            "type": "boolean",
            "description": "Flag indicating if the sensor is commissioned or not"
          },
          "firmwareID": {
            "type": "integer",
            "description": "Last Firmware ID",
            "format": "int32"
          },
          "location": {
            "type": "string",
            "description": "Location of the plant",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          },
          "sensorType": {
            "$ref": "#/components/schemas/SensorTypeDTO"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorPropertyValueResponseDTO"
            },
            "description": "Sensor properties",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SensorActiveSubscriptionResponseDTO"
          },
          "assetName": {
            "type": "string",
            "description": "Asset Name",
            "nullable": true
          },
          "trialPeriodDuration": {
            "type": "integer",
            "description": "Trial period duration",
            "format": "int32",
            "nullable": true
          },
          "lastSensorState": {
            "$ref": "#/components/schemas/SensorState"
          },
          "lastSensorStateCreatedOn": {
            "type": "string",
            "description": "Last sensor state update timestamp",
            "format": "date-time"
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "revision": {
            "type": "string",
            "description": "Hardware Revision",
            "nullable": true
          },
          "manufacturingBatch": {
            "type": "string",
            "description": "Manufacturing Batch",
            "nullable": true
          },
          "baseFirmwareVersion": {
            "type": "string",
            "description": "Base Firmware Version",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Last Firmware Version",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor with its asset propperties"
      },
      "SensorDetailResponseDTO": {
        "required": [
          "sensorIdentifier"
        ],
        "type": "object",
        "properties": {
          "isCommissioned": {
            "type": "boolean",
            "description": "Flag indicating if the sensor is commissioned or not"
          },
          "firmwareID": {
            "type": "integer",
            "description": "Last Firmware ID",
            "format": "int32"
          },
          "sensorType": {
            "$ref": "#/components/schemas/SensorTypeDTO"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorPropertyValueResponseDTO"
            },
            "description": "Sensor properties",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SensorActiveSubscriptionResponseDTO"
          },
          "assetProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetPropertyValueResponseDTO"
            },
            "description": "Asset propperties",
            "nullable": true
          },
          "firmwareUpdate": {
            "$ref": "#/components/schemas/FirmwareUpdateResponseDTO"
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationProfileDTO"
            },
            "description": "Configuration Profiles",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "revision": {
            "type": "string",
            "description": "Hardware Revision",
            "nullable": true
          },
          "manufacturingBatch": {
            "type": "string",
            "description": "Manufacturing Batch",
            "nullable": true
          },
          "baseFirmwareVersion": {
            "type": "string",
            "description": "Base Firmware Version",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "Last Firmware Version",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor"
      },
      "SensorResetHistoryResponseDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "User Name",
            "nullable": true
          },
          "resetTimestamp": {
            "type": "string",
            "description": "Reset Timestamp",
            "format": "date-time",
            "nullable": true
          }
        },
        "description": "Model that describes a reset sensor history entry"
      },
      "SensorCommissionStatusResponseDTO": {
        "type": "object",
        "properties": {
          "isCommissioned": {
            "type": "boolean",
            "description": "Is commissioned"
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationProfileDTO"
            },
            "description": "Configuration profiles",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor commission status entry"
      },
      "SensorFeatureValueRequestDTO": {
        "required": [
          "featureKey",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "featureKey": {
            "type": "string",
            "description": "Feature Type Key",
            "nullable": true
          },
          "featureValue": {
            "type": "object",
            "description": "Feature Value",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time"
          }
        },
        "description": "Model for saving a feature value for a sensor"
      },
      "SensorFeatureRequestDTO": {
        "required": [
          "features",
          "sensorIdentifier",
          "sensorTypeID"
        ],
        "type": "object",
        "properties": {
          "sensorIdentifier": {
            "type": "string",
            "description": "Identifier",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Type ID of the sensor",
            "format": "int32"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorFeatureValueRequestDTO"
            },
            "description": "List of features with values",
            "nullable": true
          }
        },
        "description": "Model for saving feature values for a sensor"
      },
      "SensorFeatureValueExtendedResponseDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "User Name",
            "nullable": true
          },
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "featureKey": {
            "type": "string",
            "description": "Feature Type Key",
            "nullable": true
          },
          "featureValue": {
            "type": "object",
            "description": "Feature Value",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time"
          },
          "isVisible": {
            "type": "boolean",
            "description": "Value that indicates if the feature type is visible"
          },
          "featureName": {
            "type": "string",
            "description": "Feature Type Name",
            "nullable": true
          },
          "featureKeySequenceNo": {
            "type": "integer",
            "description": "Feature Key Sequence Number",
            "format": "int32"
          }
        },
        "description": "Model that describes a sensor feature with value entry"
      },
      "SensorListRequestDTO": {
        "required": [
          "sensorIdentifiers",
          "sensorTypeID"
        ],
        "type": "object",
        "properties": {
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "sensorIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sensor Identifiers",
            "nullable": true
          }
        },
        "description": "Model that describes sensors request"
      },
      "SensorMaintenanceScheduleResponseDTO": {
        "type": "object",
        "properties": {
          "uniqueID": {
            "type": "string",
            "description": "Unique Item Code",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Schedule start date",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Schedule end date",
            "format": "date-time"
          },
          "sensorIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of sensor identifier",
            "nullable": true
          }
        },
        "description": "Model that describers sensor maintenance schedule response"
      },
      "SensorsMaintenanceResponseDTO": {
        "type": "object",
        "properties": {
          "maintenanceType": {
            "$ref": "#/components/schemas/MaintenanceType"
          },
          "sensorsMaintenanceSchedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorMaintenanceScheduleResponseDTO"
            },
            "description": "Maintenance Schedule",
            "nullable": true
          }
        },
        "description": "Model that describes sensor maintenence schedule"
      },
      "SensorStateHistoryResponseDTO": {
        "type": "object",
        "properties": {
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the transition",
            "format": "date-time"
          },
          "finalState": {
            "$ref": "#/components/schemas/SensorState"
          },
          "userName": {
            "type": "string",
            "description": "User Name",
            "nullable": true
          }
        },
        "description": "Model that describes sensor state history"
      },
      "SensorFirmwareHistoryResponseDTO": {
        "type": "object",
        "properties": {
          "sensorIdentifier": {
            "type": "string",
            "description": "Sensor Identifier",
            "nullable": true
          },
          "sensorTypeName": {
            "type": "string",
            "description": "Sensor Type Name",
            "nullable": true
          },
          "firmwareVersion": {
            "type": "string",
            "description": "New firmware version",
            "nullable": true
          },
          "firmwareVersionChangedOn": {
            "type": "string",
            "description": "Timestamp of firmware update",
            "format": "date-time"
          },
          "userEmail": {
            "type": "string",
            "description": "Email of the user that made the change",
            "nullable": true
          },
          "deviceUniqueID": {
            "type": "string",
            "description": "Device Unique ID",
            "nullable": true
          },
          "deviceTypeName": {
            "type": "string",
            "description": "Device Type Name",
            "nullable": true
          }
        },
        "description": "Model that describes a firmware history item"
      },
      "AssetTypeConfigurationProfileDTO": {
        "type": "object",
        "properties": {
          "assetTypeID": {
            "type": "integer",
            "description": "Asset Type ID",
            "format": "int32"
          },
          "assetTypeName": {
            "type": "string",
            "description": "Asset Type Name",
            "nullable": true
          },
          "assetTypeDescription": {
            "type": "string",
            "description": "Asset Type Description",
            "nullable": true
          },
          "connectionData": {
            "type": "object",
            "description": "Connection data of the configuration profile",
            "nullable": true
          },
          "configurationProfileID": {
            "type": "integer",
            "description": "Id of the configuration profile",
            "format": "int32"
          },
          "configurationProfileName": {
            "type": "string",
            "description": "Name of the configuration profile",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "description": "Configuration profile visibility flag"
          },
          "minimumFirmwareVersion": {
            "type": "string",
            "description": "Configuration profile min firmware version",
            "nullable": true
          }
        },
        "description": "Model that describes an asset type configuration profile"
      },
      "SensorTypeResponseDTO": {
        "type": "object",
        "properties": {
          "typeProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SensorPropertyValueResponseDTO"
            },
            "description": "Sensor type properties",
            "nullable": true
          },
          "configurationProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetTypeConfigurationProfileDTO"
            },
            "description": "Configuration profiles",
            "nullable": true
          },
          "sensorTypeID": {
            "type": "integer",
            "description": "Sensor Type ID",
            "format": "int32"
          },
          "sensorTypeName": {
            "type": "string",
            "description": "Sensor type name",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Sensor type display name",
            "nullable": true
          }
        },
        "description": "Model that describes a sensor type"
      },
      "SensorPropertyResponseDTO": {
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "Property Type Key",
            "nullable": true
          },
          "propertyName": {
            "type": "string",
            "description": "Property Type Name",
            "nullable": true
          },
          "propertyKeySequenceNo": {
            "type": "integer",
            "description": "Property Key Sequence Number",
            "format": "int32"
          },
          "propertyDataType": {
            "type": "string",
            "description": "Property Data Type",
            "nullable": true
          },
          "propertyIsVisible": {
            "type": "boolean",
            "description": "Value that indicates if the property is visible"
          },
          "propertyIsDataList": {
            "type": "boolean",
            "description": "Value that indicates if the property is a data list (CSV)"
          }
        },
        "description": "Model that describes a property for a sensor"
      },
      "SensorFeatureResponseDTO": {
        "type": "object",
        "properties": {
          "featureTypeKey": {
            "type": "string",
            "description": "Feature Type Key",
            "nullable": true
          },
          "featureTypeName": {
            "type": "string",
            "description": "Feature Type Name",
            "nullable": true
          },
          "featureDataType": {
            "type": "string",
            "description": "Feature Data Type",
            "nullable": true
          },
          "featureKeySequenceNo": {
            "type": "integer",
            "description": "Feature Key Sequence Number",
            "format": "int32"
          }
        },
        "description": "Model that describes a feature for a sensor"
      },
      "AvailableSiteDTO": {
        "type": "object",
        "properties": {
          "siteIdentifier": {
            "type": "string",
            "description": "ServIS Site Identifier",
            "nullable": true
          },
          "plantID": {
            "type": "integer",
            "description": "Plant ID",
            "format": "int32",
            "nullable": true
          },
          "siteName": {
            "type": "string",
            "description": "Site Name",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Latitudinal position of site",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Longitudinal position of the site",
            "format": "double",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the site",
            "nullable": true
          }
        },
        "description": ""
      },
      "ApiExtendedResponseDTO": {
        "type": "object",
        "properties": {
          "verb": {
            "type": "string",
            "description": "Verb",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "Path",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "apiID": {
            "type": "integer",
            "description": "API ID",
            "format": "int32"
          },
          "apiName": {
            "type": "string",
            "description": "API Name",
            "nullable": true
          }
        },
        "description": "Model that describes an API"
      },
      "ApiGroupResponseDTO": {
        "required": [
          "apiGroupName"
        ],
        "type": "object",
        "properties": {
          "apiGroupID": {
            "type": "integer",
            "description": "API Group ID",
            "format": "int32"
          },
          "apiGroupName": {
            "type": "string",
            "description": "API Group Name",
            "nullable": true
          }
        },
        "description": "Model that describes an API group"
      },
      "ApiResponseDTO": {
        "type": "object",
        "properties": {
          "apiID": {
            "type": "integer",
            "description": "API ID",
            "format": "int32"
          },
          "apiName": {
            "type": "string",
            "description": "API Name",
            "nullable": true
          }
        },
        "description": "Model that describes an API"
      },
      "ApiGroupExtendedResponseDTO": {
        "required": [
          "apiGroupName"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "apis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiResponseDTO"
            },
            "description": "List of APIs",
            "nullable": true
          },
          "apiGroupID": {
            "type": "integer",
            "description": "API Group ID",
            "format": "int32"
          },
          "apiGroupName": {
            "type": "string",
            "description": "API Group Name",
            "nullable": true
          }
        },
        "description": "Model that describes an API group"
      },
      "CapabilityExtendedResponseDTO": {
        "required": [
          "capabilityCode",
          "capabilityName"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "apiGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiGroupResponseDTO"
            },
            "description": "List of API Groups",
            "nullable": true
          },
          "capabilityID": {
            "type": "integer",
            "description": "Capability ID",
            "format": "int32"
          },
          "capabilityName": {
            "type": "string",
            "description": "Capability Name",
            "nullable": true
          },
          "capabilityCode": {
            "type": "string",
            "description": "Capability Code",
            "nullable": true
          }
        },
        "description": "Model that describes a capability"
      },
      "CapabilityResponseDTO": {
        "required": [
          "capabilityCode",
          "capabilityName"
        ],
        "type": "object",
        "properties": {
          "capabilityID": {
            "type": "integer",
            "description": "Capability ID",
            "format": "int32"
          },
          "capabilityName": {
            "type": "string",
            "description": "Capability Name",
            "nullable": true
          },
          "capabilityCode": {
            "type": "string",
            "description": "Capability Code",
            "nullable": true
          }
        },
        "description": "Model that describes a capability"
      },
      "SubscriptionResponseDTO": {
        "type": "object",
        "properties": {
          "isBasicSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have basic subscription level"
          },
          "isTrialSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have trial subscription level"
          },
          "isLifetimeSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have lifetime subscription level"
          },
          "subscriptionLevel": {
            "$ref": "#/components/schemas/SubscriptionLevelDTO"
          }
        },
        "description": "Model that describes a subscription"
      },
      "SubscriptionExtendedResponseDTO": {
        "type": "object",
        "properties": {
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityResponseDTO"
            },
            "description": "List of capabilities",
            "nullable": true
          },
          "isBasicSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have basic subscription level"
          },
          "isTrialSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have trial subscription level"
          },
          "isLifetimeSubscription": {
            "type": "boolean",
            "description": "Describes if activation codes have lifetime subscription level"
          },
          "subscriptionLevel": {
            "$ref": "#/components/schemas/SubscriptionLevelDTO"
          }
        },
        "description": "Model that describes a subscription"
      },
      "FFTCalculationResponseDTO": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "number",
            "description": "Frequency",
            "format": "double"
          },
          "magnitude": {
            "type": "number",
            "description": "FFT magnitude",
            "format": "double"
          }
        },
        "description": "FFT Calculation Response model"
      },
      "FFTAxisResponseDTO": {
        "type": "object",
        "properties": {
          "sensorAxisName": {
            "type": "string",
            "description": "Sensor Axis Name",
            "nullable": true
          },
          "sensorAxisDataValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FFTCalculationResponseDTO"
            },
            "description": "Sensor Axis Data",
            "nullable": true
          }
        },
        "description": "FFT Response model for a specific axis"
      },
      "FFTResponseDTO": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp",
            "format": "date-time"
          },
          "dataValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FFTAxisResponseDTO"
            },
            "description": "Axis data values",
            "nullable": true
          }
        },
        "description": "FFT Response model"
      },
      "TimeBasedKPIType": {
        "enum": [
          "ConditionIndex",
          "AnomalyDetection",
          "RawData"
        ],
        "type": "string",
        "description": "List of time based KPI types"
      },
      "TimeBasedKPIKeyDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "Data type",
            "nullable": true
          }
        },
        "description": "Model that describes a time-based KPI key"
      },
      "TimeBasedKPIValueRequestDTO": {
        "required": [
          "createdOn",
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the time-based KPI",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Timestamp of the time-based KPI",
            "format": "date-time"
          },
          "value": {
            "type": "object",
            "description": "Value of the time-based KPI",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the time-based KPI value",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Details of the time-based KPI value",
            "nullable": true
          }
        },
        "description": "Model for adding a time-based KPI value"
      },
      "TimeBasedKPIRequestDTO": {
        "required": [
          "assetID",
          "values"
        ],
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeBasedKPIValueRequestDTO"
            },
            "description": "List of time-based KPI values",
            "nullable": true
          }
        },
        "description": "Model for adding time-based KPI values for assets"
      },
      "TimeBasedKPIValueResponseDTO": {
        "required": [
          "createdOn",
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "healthStatus": {
            "type": "integer",
            "description": "Health status of the time-based KPI value",
            "format": "int32",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "Key of the time-based KPI",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Timestamp of the time-based KPI",
            "format": "date-time"
          },
          "value": {
            "type": "object",
            "description": "Value of the time-based KPI",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the time-based KPI value",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Details of the time-based KPI value",
            "nullable": true
          }
        },
        "description": "Model that describes a time-based KPI value"
      },
      "TimeBasedKPIResponseDTO": {
        "type": "object",
        "properties": {
          "assetID": {
            "type": "integer",
            "description": "Asset ID",
            "format": "int32"
          },
          "assetName": {
            "type": "string",
            "description": "Asset name",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeBasedKPIValueResponseDTO"
            },
            "description": "List of time-based KPI values",
            "nullable": true
          }
        },
        "description": "Model that describes time-based KPI values for assets"
      },
      "UserRequestDTO": {
        "type": "object",
        "properties": {
          "gisNumber": {
            "type": "string",
            "description": "ABB GIS Number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "nullable": true
          },
          "userRegistrationType": {
            "$ref": "#/components/schemas/UserRegistrationType"
          }
        },
        "description": "Model for updating a user"
      },
      "UserOrganizationRequestDTO": {
        "required": [
          "organizationName"
        ],
        "type": "object",
        "properties": {
          "organizationName": {
            "type": "string",
            "description": "Organization Name",
            "nullable": true
          }
        },
        "description": "Model to assign user to organization"
      },
      "UserOrganizationReferenceRequestDTO": {
        "required": [
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "Email address of the reference user",
            "nullable": true
          }
        },
        "description": "Model that describes a reference user"
      },
      "RoleType": {
        "enum": [
          "Undefined",
          "AssetRole",
          "UserRole"
        ],
        "type": "string",
        "description": "Types of roles"
      },
      "RoleResponseDTO": {
        "type": "object",
        "properties": {
          "roleID": {
            "type": "integer",
            "description": "Role ID",
            "format": "int32",
            "nullable": true
          },
          "roleName": {
            "type": "string",
            "description": "Role Name",
            "nullable": true
          },
          "roleDisplayName": {
            "type": "string",
            "description": "Role Display Name",
            "nullable": true
          },
          "roleType": {
            "$ref": "#/components/schemas/RoleType"
          }
        },
        "description": "Model that describes a role"
      },
      "UserLanguageResponseDTO": {
        "type": "object",
        "properties": {
          "languageName": {
            "type": "string",
            "description": "Language name",
            "nullable": true
          },
          "languageCode": {
            "type": "string",
            "description": "Language code",
            "nullable": true
          }
        },
        "description": "Model that describes a language"
      },
      "LandingPageDTO": {
        "type": "object",
        "properties": {
          "landingPageID": {
            "type": "integer",
            "description": "Landing page unique ID",
            "format": "int32"
          },
          "landingPageValue": {
            "type": "string",
            "description": "Landing page configuration value",
            "nullable": true
          }
        },
        "description": "Model with identifiable information for Landing Page"
      },
      "ApiKeyResponseDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "API Key ID",
            "format": "int32"
          },
          "createdOn": {
            "type": "string",
            "description": "API Key Timestamp",
            "format": "date-time"
          },
          "deletedOn": {
            "type": "string",
            "description": "API Key Revoked On",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "API Key Name",
            "nullable": true
          }
        },
        "description": "Model for API Key response object"
      },
      "ApiKeyAddRequestDTO": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "description": "API Key Value",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "API Key Name",
            "nullable": true
          }
        },
        "description": "Model for API Key add request object"
      },
      "UserGroupRequestDTO": {
        "required": [
          "userGroupName"
        ],
        "type": "object",
        "properties": {
          "userGroupName": {
            "maxLength": 100,
            "type": "string",
            "description": "User Group Name",
            "nullable": true
          }
        },
        "description": "Model to add a user group"
      },
      "UserToGroupAddRequestDTO": {
        "required": [
          "roleID",
          "userID"
        ],
        "type": "object",
        "properties": {
          "roleID": {
            "type": "integer",
            "description": "Role ID",
            "format": "int32"
          },
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32"
          }
        },
        "description": "Model to add a user to a group"
      },
      "UserToGroupRemoveRequestDTO": {
        "required": [
          "userID"
        ],
        "type": "object",
        "properties": {
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32"
          }
        },
        "description": "Model to remove a user from a group"
      },
      "UserWithRoleResponseDTO": {
        "type": "object",
        "properties": {
          "roleID": {
            "type": "integer",
            "description": "Role ID",
            "format": "int32",
            "nullable": true
          },
          "roleName": {
            "type": "string",
            "description": "Role Name",
            "nullable": true
          },
          "roleDisplayName": {
            "type": "string",
            "description": "Role Display Name",
            "nullable": true
          },
          "roleType": {
            "$ref": "#/components/schemas/RoleType"
          },
          "userID": {
            "type": "integer",
            "description": "User ID",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "User Name",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First Name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last Name",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "description": "User Email",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/UserOrganizationResponseDTO"
          }
        },
        "description": "Model that describes a user with role"
      },
      "UserGroupWithRoleResponseDTO": {
        "required": [
          "userGroupName"
        ],
        "type": "object",
        "properties": {
          "roleID": {
            "type": "integer",
            "description": "Role ID",
            "format": "int32",
            "nullable": true
          },
          "roleName": {
            "type": "string",
            "description": "Role Name",
            "nullable": true
          },
          "roleDisplayName": {
            "type": "string",
            "description": "Role Display Name",
            "nullable": true
          },
          "isRoleInherited": {
            "type": "boolean",
            "description": "Role is inherited"
          },
          "userGroupID": {
            "type": "integer",
            "description": "User Group ID",
            "format": "int32"
          },
          "isMainGroup": {
            "type": "boolean",
            "description": "Flag that identifies a user group as administrative"
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "isTrusted": {
            "type": "boolean",
            "description": "Flag that identifies if a UG is trusted",
            "nullable": true
          },
          "allowManagement": {
            "type": "boolean",
            "description": "Flag indicating if the current user can add or remove users to the user group"
          },
          "userGroupName": {
            "maxLength": 100,
            "type": "string",
            "description": "User Group Name",
            "nullable": true
          }
        },
        "description": "Model that describes a user group with role"
      },
      "UserToGroupInviteRequestDTO": {
        "required": [
          "organizationID",
          "roleID",
          "userGroupID",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "User Group ID",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "roleID": {
            "type": "integer",
            "description": "Role ID",
            "format": "int32"
          },
          "userGroupID": {
            "type": "integer",
            "description": "User Group ID",
            "format": "int32"
          }
        },
        "description": "Model to invite a user to a group"
      },
      "UserToGroupInviteResponseDTO": {
        "required": [
          "organizationID",
          "roleID",
          "userGroupID",
          "userName"
        ],
        "type": "object",
        "properties": {
          "uniqueID": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "description": "User Group ID",
            "nullable": true
          },
          "organizationID": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int32"
          },
          "roleID": {
            "type": "integer",
            "description": "Role ID",
            "format": "int32"
          },
          "userGroupID": {
            "type": "integer",
            "description": "User Group ID",
            "format": "int32"
          }
        },
        "description": "Model that describes a user invitation to a group"
      },
      "UserMeasurementUnitRequestDTO": {
        "required": [
          "measurementUnitGroupID",
          "measurementUnitStandard"
        ],
        "type": "object",
        "properties": {
          "measurementUnitGroupID": {
            "type": "integer",
            "description": "Measurement Unit Group ID",
            "format": "int32"
          },
          "measurementUnitStandard": {
            "$ref": "#/components/schemas/MeasurementUnitStandard"
          }
        },
        "description": "Model for saving user measure units"
      },
      "UserLandingPageRequestDTO": {
        "type": "object",
        "properties": {
          "configurationName": {
            "type": "string",
            "description": "Configuration name, unique in DB",
            "nullable": true
          },
          "landingPageID": {
            "type": "integer",
            "description": "Landing page unique ID",
            "format": "int32"
          }
        },
        "description": "Model that describes request tot set start-up page for user"
      },
      "UserProfileRequestDTO": {
        "required": [
          "userMeasurementUnits"
        ],
        "type": "object",
        "properties": {
          "userMeasurementUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMeasurementUnitRequestDTO"
            },
            "description": "List of measure units",
            "nullable": true
          },
          "selectedLanguageCode": {
            "type": "string",
            "description": "User selected language code",
            "nullable": true
          },
          "disableNotifications": {
            "type": "boolean",
            "description": "Enable user notification",
            "nullable": true
          },
          "useReducedSizeForPictures": {
            "type": "boolean",
            "description": "Flag indicating the use of reduced size for pictures",
            "nullable": true
          },
          "landingPages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLandingPageRequestDTO"
            },
            "description": "User's choice for start-up page in Smart Sensor platform",
            "nullable": true
          }
        },
        "description": "Model for editing a user profile"
      },
      "UserMeasurementUnitResponseDTO": {
        "required": [
          "measurementUnitGroupID",
          "measurementUnitStandard"
        ],
        "type": "object",
        "properties": {
          "measurementUnitGroupName": {
            "type": "string",
            "description": "Measurement Unit Group Name",
            "nullable": true
          },
          "measurementUnitSymbol": {
            "type": "string",
            "description": "Measurement Unit Symbol",
            "nullable": true
          },
          "measurementUnitGroupID": {
            "type": "integer",
            "description": "Measurement Unit Group ID",
            "format": "int32"
          },
          "measurementUnitStandard": {
            "$ref": "#/components/schemas/MeasurementUnitStandard"
          }
        },
        "description": "Model that describes a measure unit"
      },
      "UserLandingPageResponseDTO": {
        "type": "object",
        "properties": {
          "landingPageValue": {
            "type": "string",
            "description": "Landing page configuration value",
            "nullable": true
          },
          "configurationName": {
            "type": "string",
            "description": "Configuration name, unique in DB",
            "nullable": true
          },
          "landingPageID": {
            "type": "integer",
            "description": "Landing page unique ID",
            "format": "int32"
          }
        },
        "description": "Model that describes start-up page for user"
      },
      "UserProfileResponseDTO": {
        "type": "object",
        "properties": {
          "userMeasurementUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMeasurementUnitResponseDTO"
            },
            "description": "List of measure units",
            "nullable": true
          },
          "userLanguage": {
            "$ref": "#/components/schemas/UserLanguageResponseDTO"
          },
          "managedUserRequestTimestamp": {
            "type": "string",
            "description": "Managed User Request Timestamp",
            "format": "date-time",
            "nullable": true
          },
          "disableNotifications": {
            "type": "boolean",
            "description": "Enable user notification"
          },
          "useReducedSizeForPictures": {
            "type": "boolean",
            "description": "Flag indicating the use of reduced size for pictures"
          },
          "broadcastMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BroadcastMessageResponseDTO"
            },
            "description": "Broadcast notification",
            "nullable": true
          },
          "landingPages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLandingPageResponseDTO"
            },
            "description": "User's choice for start-up page in Smart Sensor platform",
            "nullable": true
          }
        },
        "description": "Model that describes a user profile"
      }
    },
    "securitySchemes": {
      "Bearer token": {
        "type": "apiKey",
        "description": "Please enter Bearer and auth token into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer token": [ ]
    }
  ]
}